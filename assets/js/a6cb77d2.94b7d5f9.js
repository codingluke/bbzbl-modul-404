"use strict";(self.webpackChunkbbzbl_modul_404=self.webpackChunkbbzbl_modul_404||[]).push([[8946],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>p});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),u=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=u(e.components);return a.createElement(o.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(t),p=i,b=c["".concat(o,".").concat(p)]||c[p]||m[p]||r;return t?a.createElement(b,l(l({ref:n},d),{},{components:t})):a.createElement(b,l({ref:n},d))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=c;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var u=2;u<r;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},2332:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>f,contentTitle:()=>N,default:()=>w,frontMatter:()=>g,metadata:()=>v,toc:()=>y});var a=t(7462),i=t(7294),r=t(3905),l=t(6010),s=t(2389),o=t(7392),u=t(7094),d=t(2466);const m="tabList__CuJ",c="tabItem_LNqP";function p(e){var n,t;const{lazy:r,block:s,defaultValue:p,values:b,groupId:k,className:h}=e,g=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=b?b:g.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),v=(0,o.l)(N,((e,n)=>e.value===n.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const f=null===p?p:null!=(n=null!=p?p:null==(t=g.find((e=>e.props.default)))?void 0:t.props.value)?n:g[0].props.value;if(null!==f&&!N.some((e=>e.value===f)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+N.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:I}=(0,u.U)(),[w,z]=(0,i.useState)(f),C=[],{blockElementScrollPositionUntilNextRender:V}=(0,d.o5)();if(null!=k){const e=y[k];null!=e&&e!==w&&N.some((n=>n.value===e))&&z(e)}const j=e=>{const n=e.currentTarget,t=C.indexOf(n),a=N[t].value;a!==w&&(V(n),z(a),null!=k&&I(k,String(a)))},O=e=>{var n;let t=null;switch(e.key){case"Enter":j(e);break;case"ArrowRight":{var a;const n=C.indexOf(e.currentTarget)+1;t=null!=(a=C[n])?a:C[0];break}case"ArrowLeft":{var i;const n=C.indexOf(e.currentTarget)-1;t=null!=(i=C[n])?i:C[C.length-1];break}}null==(n=t)||n.focus()};return i.createElement("div",{className:(0,l.Z)("tabs-container",m)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":s},h)},N.map((e=>{let{value:n,label:t,attributes:r}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:e=>C.push(e),onKeyDown:O,onClick:j},r,{className:(0,l.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":w===n})}),null!=t?t:n)}))),r?(0,i.cloneElement)(g.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},g.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==w})))))}function b(e){const n=(0,s.Z)();return i.createElement(p,(0,a.Z)({key:String(n)},e))}const k="tabItem_Ymn6";function h(e){let{children:n,hidden:t,className:a}=e;return i.createElement("div",{role:"tabpanel",className:(0,l.Z)(k,a),hidden:t},n)}const g={},N="Fachklassen",v={unversionedId:"konzepte/fachklassen",id:"konzepte/fachklassen",title:"Fachklassen",description:'Eine Fachklasse ist eine Klasse, die nur "im Hintergrund" arbeitet und nicht f\xfcr die Interaktion mit dem Benutzer zust\xe4ndig ist.',source:"@site/docs/konzepte/fachklassen.md",sourceDirName:"konzepte",slug:"/konzepte/fachklassen",permalink:"/bbzbl-modul-404/docs/konzepte/fachklassen",draft:!1,editUrl:"https://github.com/codingluke/bbzbl-modul-404/tree/main/docs/konzepte/fachklassen.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ActionListener",permalink:"/bbzbl-modul-404/docs/konzepte/actionlistener"},next:{title:"Formatierung",permalink:"/bbzbl-modul-404/docs/konzepte/formatierung"}},f={},y=[{value:"Klassenstruktur",id:"klassenstruktur",level:2},{value:"Instanziierung und Verwendung eines Objekts/Instanz",id:"instanziierung-und-verwendung-eines-objektsinstanz",level:2},{value:"\ud83e\uddb8 Unterschied von einem Objekt und einer Variable",id:"-unterschied-von-einem-objekt-und-einer-variable",level:2}],I={toc:y};function w(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},I,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"fachklassen"},"Fachklassen"),(0,r.kt)("p",null,"Eine ",(0,r.kt)("strong",{parentName:"p"},"Fachklasse"),' ist eine Klasse, die nur "im Hintergrund" arbeitet und ',(0,r.kt)("strong",{parentName:"p"},"nicht f\xfcr die Interaktion mit dem Benutzer zust\xe4ndig ist"),"."),(0,r.kt)("h2",{id:"klassenstruktur"},"Klassenstruktur"),(0,r.kt)("p",null,"Gem\xe4ss aktuellem Wissensstand folgen Klassen folgendem ",(0,r.kt)("strong",{parentName:"p"},"Schema"),":"),(0,r.kt)(b,{mdxType:"Tabs"},(0,r.kt)(h,{className:"shadow--tl",value:"apple",label:"Klassen-Deklaration",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// highlight-next-line\npublic class ClassName { // Klassendeklaration Start\n\n  private int myInstanceVariable;                // Instanzvariablen\n\n  public void setMyInstanceVariable(int value) { // Methode (setter)\n    myInstanceVariable = value;\n  }\n\n  public int getMyInstanceVariable() {           // Methode (getter)\n    return myInstanceVariable;\n  }\n\n// highlight-next-line\n} // Klassendeklaration Ende\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Die ",(0,r.kt)("inlineCode",{parentName:"li"},"Klassen-Deklaration")," definiert den ",(0,r.kt)("strong",{parentName:"li"},"Namen")," der Klasse."),(0,r.kt)("li",{parentName:"ul"},"Der ",(0,r.kt)("strong",{parentName:"li"},"Namen")," der Klasse definiert automatisch auch einen ",(0,r.kt)("strong",{parentName:"li"},"Datentyp"),"!"))),(0,r.kt)(h,{className:"shadow--tl",value:"body",label:"Klassen-Body",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class ClassName { // Klassendeklaration Start\n  // highlight-start\n\n  private int myInstanceVariable;                // Instanzvariablen\n\n  public void setMyInstanceVariable(int value) { // Methode (setter)\n    myInstanceVariable = value;\n  }\n\n  public int getMyInstanceVariable() {           // Methode (getter)\n    return myInstanceVariable;\n  }\n\n  // highlight-end\n} // Klassendeklaration Ende\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Klassenbody beinhaltet die ",(0,r.kt)("strong",{parentName:"li"},"Deklaration der ",(0,r.kt)("inlineCode",{parentName:"strong"},"Instanz-Variablen")," und ",(0,r.kt)("inlineCode",{parentName:"strong"},"Instanz-Methoden"))),(0,r.kt)("li",{parentName:"ul"},"Innerhalb des Body darf ",(0,r.kt)("strong",{parentName:"li"},"kein ausf\xfchrenden Code")," stehen!",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Dieser befindet sich ",(0,r.kt)("strong",{parentName:"li"},"immer")," innerhalb vom ",(0,r.kt)("inlineCode",{parentName:"li"},"Methoden-Body")))))),(0,r.kt)(h,{className:"shadow--tl",value:"orange",label:"Instanz-Variablen",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class ClassName { // Klassendeklaration Start\n  // highlight-start\n\n  private int myInstanceVariable;                // Instanzvariablen\n\n  // highlight-end\n  public void setMyInstanceVariable(int value) { // Methode (setter)\n    myInstanceVariable = value;\n  }\n\n  public int getMyInstanceVariable() {           // Methode (getter)\n    return myInstanceVariable;\n  }\n\n} // Klassendeklaration Ende\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Instanz-Variablen")," sind Variablen welche im ",(0,r.kt)("inlineCode",{parentName:"li"},"Klassen-Body")," definiert werden. "),(0,r.kt)("li",{parentName:"ul"},"Daher befinden sie sich ",(0,r.kt)("strong",{parentName:"li"},"nicht innerhalb")," einer ",(0,r.kt)("inlineCode",{parentName:"li"},"Methode"),"."),(0,r.kt)("li",{parentName:"ul"},"Instanzvariablen k\xf6nnen innerhalb ",(0,r.kt)("strong",{parentName:"li"},"aller ",(0,r.kt)("inlineCode",{parentName:"strong"},"Instanz-Methoden"))," zugegriffen werden."),(0,r.kt)("li",{parentName:"ul"},"Das Wort ",(0,r.kt)("inlineCode",{parentName:"li"},"private")," bedeutet, dass die Variable aber nur innerhalb der Klasse sichtbar ist, ",(0,r.kt)("strong",{parentName:"li"},"nicht von ausserhalb"),"."))),(0,r.kt)(h,{className:"shadow--tl",value:"banana",label:"Instanz-Methoden",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class ClassName { // Klassendeklaration Start\n\n  private int myInstanceVariable;                // Instanzvariablen\n\n  // highlight-start\n  public void setMyInstanceVariable(int value) { // Methode (setter)\n    myInstanceVariable = value;\n  }\n\n  public int getMyInstanceVariable() {           // Methode (getter)\n    return myInstanceVariable;\n  }\n  // highlight-end\n\n} // Klassendeklaration Ende\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"sind Methoden innerhalb einer Klasse, welche ",(0,r.kt)("strong",{parentName:"li"},"nicht ",(0,r.kt)("inlineCode",{parentName:"strong"},"static"))," deklariert sind"),(0,r.kt)("li",{parentName:"ul"},"k\xf6nnen auf alle ",(0,r.kt)("inlineCode",{parentName:"li"},"Instanz-Variablen")," zugreifen"),(0,r.kt)("li",{parentName:"ul"},"In ihnen wird die ",(0,r.kt)("strong",{parentName:"li"},"Fachlogik")," ausprogrammiert",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"H\xe4ufig werden ",(0,r.kt)("inlineCode",{parentName:"li"},"Instanz-Variablen")," mutiert, verarbeitet und oder zur\xfcckgegeben"))))),(0,r.kt)(h,{className:"shadow--tl",value:"instanzmethodenbody",label:"Methoden-Body",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class ClassName { // Klassendeklaration Start\n\n  private int myInstanceVariable;                // Instanzvariablen\n\n  public void setMyInstanceVariable(int value) { // Methode (setter)\n    // highlight-next-line\n    myInstanceVariable = value;\n  }\n\n  public int getMyInstanceVariable() {           // Methode (getter)\n    // highlight-next-line\n    return myInstanceVariable;\n  }\n\n} // Klassendeklaration Ende\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Im ",(0,r.kt)("inlineCode",{parentName:"li"},"Methoden-Body")," befindet sich der ",(0,r.kt)("strong",{parentName:"li"},"eigentliche Code f\xfcr die Fachlogik")),(0,r.kt)("li",{parentName:"ul"},"Werden ",(0,r.kt)("inlineCode",{parentName:"li"},"Variablen")," innerhalb vom Methoden-Body deklariert, sind diese ",(0,r.kt)("strong",{parentName:"li"},"ausschliesslich innerhalb diesem"),", ab deren deklaration verwendbar/sichtbar.")))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Keine ",(0,r.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"main")," Methode in einer Fachklasse"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Es gibt ",(0,r.kt)("strong",{parentName:"li"},"keine")," Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"public static void main(String[] args)"),"."),(0,r.kt)("li",{parentName:"ul"},"Diese sollte ",(0,r.kt)("strong",{parentName:"li"},"nur")," in der ",(0,r.kt)("inlineCode",{parentName:"li"},"Starter")," Klasse existieren"),(0,r.kt)("li",{parentName:"ul"},"Es ist theoretisch m\xf6glich mehrere ",(0,r.kt)("inlineCode",{parentName:"li"},"main")," Methoden zu haben, dies ist jedoch ",(0,r.kt)("strong",{parentName:"li"},"schlechter Stil")))),(0,r.kt)("admonition",{title:"Klickt durch die Tabs!",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Bitte clicked alle Tabs oberhalb einmal an und ",(0,r.kt)("strong",{parentName:"p"},"versucht zu verstehen"),", wie eine Klasse genau aufgebaut ist!")),(0,r.kt)("h2",{id:"instanziierung-und-verwendung-eines-objektsinstanz"},"Instanziierung und Verwendung eines Objekts/Instanz"),(0,r.kt)("p",null,"Objekte lassen sich im Code wie folgt erstellen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Datentyp    Variable       Objektzuweisung  Objekterstellung\n   ClassName   variablenName         =         new ClassName();\n\n// Es k\xf6nnen mehrere Variablen mit Objekte der selben Klasse definiert werden\n   ClassName   otherClassName        =         new ClassName();\n\n//               Mit einem Punkt "." wird auf die Instanz-Methoden zugegriffen!\n   variablenName.setMyInstanceVariable(12); \n\n// Der R\xfcckgrabewert einer Methode kann in einer Variablen gespeichert werden\n   int value = variablenName.getMyInstanceVariable();\n\n// Der R\xfcckgrabewert einer Methode kann auch direkt wiederverwendet werden\n   otherObject.setMyInstanceVariable(variablenName.getMyInstanceVariable());\n')),(0,r.kt)("admonition",{title:"Je besser die Namen desto leserlicher wird der Code!",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"ClassName")," ist in dem oberen Beispiel generisch gew\xe4hlt da es sich um ein generelles Beispiel handelt. Anstatt ",(0,r.kt)("inlineCode",{parentName:"p"},"ClassName")," sollte sp\xe4ter ein ",(0,r.kt)("strong",{parentName:"p"},"spezifischer Namen")," gew\xe4hlt werden, wie z.B. ",(0,r.kt)("inlineCode",{parentName:"p"},"Account"),". Der Name der Variable kann beliebig sein. Das gleiche gilt f\xfcr ",(0,r.kt)("inlineCode",{parentName:"p"},"Variablen")," und ",(0,r.kt)("inlineCode",{parentName:"p"},"Methoden")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Account savingAccount = new Account(); // Toll\nXyz b = new Xzy();                     // Evt. nicht ganz so toll ;)\n"))),(0,r.kt)("admonition",{title:"Instanz oder Objekt, WTF :confused: ?!?",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Die W\xf6rter Objekt und Instanz sind ",(0,r.kt)("strong",{parentName:"p"},"Synonyme"),", k\xf6nnen also beliebig vertauscht werden.")),(0,r.kt)("h2",{id:"-unterschied-von-einem-objekt-und-einer-variable"},"\ud83e\uddb8 Unterschied von einem Objekt und einer Variable"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Ein Objekt ist ",(0,r.kt)("strong",{parentName:"li"},"immer in einer Variable")," gespeichert"),(0,r.kt)("li",{parentName:"ul"},"Eine Variable muss aber nicht immer ein Objekt beinhalten")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Account accountObjektVariable = new Account(); \nint intVariable = 1;                 \n\n// `accountObjektVariable` beinhaltet ein Objekt der Klasse Account\n// `intVariable` beinhaltet den den Wert 1 vom `primitiven` Datentyp int\n\naccountObjektVariable.getClass(); // Ein Objekt besitzt Methoden welche ausgef\xfchrt werden k\xf6nnen\nintVariable.getClass(); // f\xfchrt zu einem ERROR. (versuche es in `eclipse`!)\n")),(0,r.kt)("admonition",{title:"Faustregel",type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Wenn der ",(0,r.kt)("strong",{parentName:"li"},"Datentyp")," mit einem ",(0,r.kt)("strong",{parentName:"li"},"Grossbuchstaben")," anf\xe4ngt (",(0,r.kt)("inlineCode",{parentName:"li"},"String"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Account"),", ...) handelt es sich um ein ",(0,r.kt)("strong",{parentName:"li"},"Objekt")),(0,r.kt)("li",{parentName:"ul"},"Wenn der ",(0,r.kt)("strong",{parentName:"li"},"Datentyp")," mit einem ",(0,r.kt)("strong",{parentName:"li"},"Kleinbuchstaben")," anf\xe4ngt (",(0,r.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"double"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"char"),", ...) ist es ",(0,r.kt)("strong",{parentName:"li"},"kein Objekt")),(0,r.kt)("li",{parentName:"ul"},"Ein ",(0,r.kt)("strong",{parentName:"li"},"Objekt besitzt Methoden"),", welche man ausf\xfchren kann, ein ",(0,r.kt)("strong",{parentName:"li"},"primitiver Datentyp nicht"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Jedes Objekt")," besitzt die Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"getClass()"),";"))))))}w.isMDXComponent=!0}}]);