"use strict";(self.webpackChunkbbzbl_modul_404=self.webpackChunkbbzbl_modul_404||[]).push([[9915],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=i.createContext({}),m=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=m(e.components);return i.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=m(t),k=a,c=u["".concat(o,".").concat(k)]||u[k]||d[k]||r;return t?i.createElement(c,l(l({ref:n},p),{},{components:t})):i.createElement(c,l({ref:n},p))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=u;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var m=2;m<r;m++)l[m]=t[m];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7708:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var i=t(7462),a=(t(7294),t(3905));const r={},l="Basics",s={unversionedId:"repetition/basics",id:"repetition/basics",title:"Basics",description:"Hier werden nochmals in k\xfcrze alle Konzepte vom Modul 319 aufgef\xfchrt",source:"@site/docs/repetition/basics.md",sourceDirName:"repetition",slug:"/repetition/basics",permalink:"/bbzbl-modul-404/docs/repetition/basics",draft:!1,editUrl:"https://github.com/codingluke/bbzbl-modul-404/tree/main/docs/repetition/basics.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Arrays",permalink:"/bbzbl-modul-404/docs/repetition/arrays"},next:{title:"Aufgaben Grundlagen",permalink:"/bbzbl-modul-404/docs/category/aufgaben-grundlagen"}},o={},m=[{value:"Variablen",id:"variablen",level:2},{value:"<em>Primitive</em> Datentypen",id:"primitive-datentypen",level:3},{value:"Initialisierung",id:"initialisierung",level:3},{value:"Der Datentyp <code>String</code>",id:"der-datentyp-string",level:3},{value:"Strings initialisieren",id:"strings-initialisieren",level:3},{value:"Strings zusammensetzen",id:"strings-zusammensetzen",level:3},{value:"Strings mit Zahlen zusammensetzen",id:"strings-mit-zahlen-zusammensetzen",level:3},{value:"Operatoren",id:"operatoren",level:2},{value:"Arithmetische <code>+</code>, <code>-</code>, <code>/</code>, <code>*</code>, <code>%</code>",id:"arithmetische------",level:3},{value:"Verk\xfcrzte arithmetische Operation mit sich selbst <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>",id:"verk\xfcrzte-arithmetische-operation-mit-sich-selbst-----",level:3},{value:"Un\xe4re (einstellige) Operatoren <code>++</code>, <code>--</code>",id:"un\xe4re-einstellige-operatoren----",level:3},{value:"Vergleichsoperatoren <code>==</code>, <code>!=</code>, <code>!</code>",id:"vergleichsoperatoren---",level:3},{value:"Vergleichen von Strings <code>equals</code>",id:"vergleichen-von-strings-equals",level:3},{value:"Wieso ist dies nun so?",id:"wieso-ist-dies-nun-so",level:4},{value:"Und wieso darf man nun primitiven Datentypen mit == vergleichen?",id:"und-wieso-darf-man-nun-primitiven-datentypen-mit--vergleichen",level:4},{value:"Kontrollstrukturen",id:"kontrollstrukturen",level:2},{value:"if",id:"if",level:3},{value:"switch",id:"switch",level:3}],p={toc:m};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"basics"},"Basics"),(0,a.kt)("p",null,"Hier werden nochmals in k\xfcrze alle Konzepte vom Modul 319 aufgef\xfchrt"),(0,a.kt)("h2",{id:"variablen"},"Variablen"),(0,a.kt)("p",null,"Variablen sind Platzhalter um Werte zu Speichern."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Jede Variable reserviert einen Speicherplatz im Computerspeicher"),(0,a.kt)("li",{parentName:"ul"},"Durch den eindeutigen Namen kann auf diesen Speicherplatz zugegriffen werden")),(0,a.kt)("p",null,"Um eine Variable zu definieren muss ein ",(0,a.kt)("strong",{parentName:"p"},"Type"),", einen ",(0,a.kt)("strong",{parentName:"p"},"Namen")," und einen ",(0,a.kt)("strong",{parentName:"p"},"Wert")," angegeben werden."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Variable syntax"',title:'"Variable','syntax"':!0},"type variableName = value;\n")),(0,a.kt)("h3",{id:"primitive-datentypen"},(0,a.kt)("em",{parentName:"h3"},"Primitive")," Datentypen"),(0,a.kt)("p",null,"In Java gibt es eine beachtliche Anzahl an Datentypen gem\xe4ss folgender Tabelle.\nVorerst nutzen wir die ",(0,a.kt)("em",{parentName:"p"},"primitiven")," Datentypen. Diese sind erkennbar, indem der ",(0,a.kt)("strong",{parentName:"p"},"Datentyp kleingeschrieben")," ist."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Datentyp"),(0,a.kt)("th",{parentName:"tr",align:null},"Gr\xf6sse"),(0,a.kt)("th",{parentName:"tr",align:null},"Beschreibung"),(0,a.kt)("th",{parentName:"tr",align:null},"Spezifika"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"1 bit"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert ",(0,a.kt)("inlineCode",{parentName:"td"},"true")," ",(0,a.kt)("em",{parentName:"td"},"(wahr)")," oder ",(0,a.kt)("inlineCode",{parentName:"td"},"false")," ",(0,a.kt)("em",{parentName:"td"},"(falsch)")," Werte"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"byte"),(0,a.kt)("td",{parentName:"tr",align:null},"1 byte"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert ganze Zahlen von ",(0,a.kt)("inlineCode",{parentName:"td"},"-128")," bis ",(0,a.kt)("inlineCode",{parentName:"td"},"127")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"short"),(0,a.kt)("td",{parentName:"tr",align:null},"2 bytes"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert ganze Zahlen von ",(0,a.kt)("inlineCode",{parentName:"td"},"-32'768")," bis ",(0,a.kt)("inlineCode",{parentName:"td"},"32'767")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"char"),(0,a.kt)("td",{parentName:"tr",align:null},"2 bytes"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert ein einzelnes Zeichen oder ",(0,a.kt)("a",{parentName:"td",href:"https://de.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange"},"ASCII")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"''"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int"),(0,a.kt)("td",{parentName:"tr",align:null},"4 bytes"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert ganze Zahlen ",(0,a.kt)("inlineCode",{parentName:"td"},"-2'147'483'648")," bis ",(0,a.kt)("inlineCode",{parentName:"td"},"2'147'483'647")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"float"),(0,a.kt)("td",{parentName:"tr",align:null},"4 bytes"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert Gleitkommazahlen von ",(0,a.kt)("inlineCode",{parentName:"td"},"6")," bis ",(0,a.kt)("inlineCode",{parentName:"td"},"7")," Dezimalstellen"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"f"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"long"),(0,a.kt)("td",{parentName:"tr",align:null},"8 bytes"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert ganze Zahlen von ",(0,a.kt)("inlineCode",{parentName:"td"},"-9'223'372'036'854'775'808l")," bis ",(0,a.kt)("inlineCode",{parentName:"td"},"9'223'372'036'854'775'807l")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"l"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"double"),(0,a.kt)("td",{parentName:"tr",align:null},"8 bytes"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert Gleitkommazahlen von ",(0,a.kt)("inlineCode",{parentName:"td"},"15")," Dezimalstellen"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"d"))))),(0,a.kt)("h3",{id:"initialisierung"},"Initialisierung"),(0,a.kt)("p",null,"Beispiele, wie Variablen initialisiert werden k\xf6nnen. Die Leerzeichen dienen nur der \xdcbersichtlichkeit."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Deklarierung von Variablen"',title:'"Deklarierung',von:!0,'Variablen"':!0},"// Datentyp     Variablenname  Semikolon\n   int          number         ;\n   char         sign           ;\n   ...\n")),(0,a.kt)("p",null,"Die Initialisierung der Werte verwendet spezifische Zeichen f\xfcr die verscheidenen Datentypen. So endet ein ",(0,a.kt)("inlineCode",{parentName:"p"},"float"),"-Wert immer mit ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," oder ",(0,a.kt)("inlineCode",{parentName:"p"},"long")," mit ",(0,a.kt)("inlineCode",{parentName:"p"},"l"),'. Die Spezifikas pro Datentyp finden Sie in der Tabelle oberhalb unter "Spezifika".'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Deklarierung & Initialisierung von Variablen"',title:'"Deklarierung',"&":!0,Initialisierung:!0,von:!0,'Variablen"':!0},"\n// Datentyp     Variablenname  Zuweiseoperator   Wert  Semikolon\n   int          number         =                 5     ;\n   char         sign           =                 'c'   ;\n   //                                            ^ ^  spezifisch f\xfcr char sind ('')\n   long         longNumber     =                 123l  ;\n   //                                               ^ spezifisch f\xfcr long (l)\n   ...\n")),(0,a.kt)("h3",{id:"der-datentyp-string"},"Der Datentyp ",(0,a.kt)("inlineCode",{parentName:"h3"},"String")),(0,a.kt)("p",null,"Der Datentyp ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," ",(0,a.kt)("strong",{parentName:"p"},"dient zur Speicherung von Zeichenfolgen"),", also allgemeiner Text. Der Text muss immer zwischen zwei ",(0,a.kt)("strong",{parentName:"p"},'"doppelten Anf\xfchrungszeichen"')," gestellt werden."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Datentyp"),(0,a.kt)("th",{parentName:"tr",align:null},"Gr\xf6sse"),(0,a.kt)("th",{parentName:"tr",align:null},"Beschreibung"),(0,a.kt)("th",{parentName:"tr",align:null},"Spezifika"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"String"),(0,a.kt)("td",{parentName:"tr",align:null},"2 byte pro Zeichen"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert beliebigen Text"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'""'))))),(0,a.kt)("h3",{id:"strings-initialisieren"},"Strings initialisieren"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// Datentyp     Variablenname  Zuweiseoperator   Wert   Semikolon\n   String       zeichenFolge   =                 "abc"  ;\n//                                               ^   ^\n//                                   "doppelten Anf\xfchrungszeichen"\n')),(0,a.kt)("h3",{id:"strings-zusammensetzen"},"Strings zusammensetzen"),(0,a.kt)("p",null,"Mehrere Variablen vom Datentyp ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," k\xf6nnen durch ein Plus-Zeichen ",(0,a.kt)("inlineCode",{parentName:"p"},"+")," zusammengesetzt werden. Dabei sollte man darauf achten, dass der erste Text mit einem Leerzeichen enden soll. Wieso, sieht ihr im Beispiel:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Mit + Strings zusammensetzen"',title:'"Mit',"+":!0,Strings:!0,'zusammensetzen"':!0},'String name = "Mr Robot";\nSystem.out.println("Your name is " + name);\n//                              ^ Leerzeichen!\n//                  Your name is Mr Robot\n\nSystem.out.println("Your name is" + name);\n//                  Your name isMr Robot\n')),(0,a.kt)("admonition",{title:"H\xf6here Datentypen sind Grossgeschrieben",type:"note"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"String")," ist Gross geschrieben, da es sich um einen ",(0,a.kt)("em",{parentName:"li"},"h\xf6heren")," Datentyp handelt."),(0,a.kt)("li",{parentName:"ul"},"Ein ",(0,a.kt)("inlineCode",{parentName:"li"},"String")," baut auf dem ",(0,a.kt)("em",{parentName:"li"},"primitiven")," Datentyp ",(0,a.kt)("inlineCode",{parentName:"li"},"char")," auf ",(0,a.kt)("em",{parentName:"li"},"(\ud83d\udca1 daher h\xf6her)")," ",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},'Evt. Hilft die Analogie von "Atome (primitiv)" zu "Molek\xfcle (h\xf6her)".'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"H\xf6here")," Datentypen sind auch Objekte.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Was Objekte genau sind, erfahrt ihr im Folgemodul 404 und ist noch nicht relevant!"))))),(0,a.kt)("h3",{id:"strings-mit-zahlen-zusammensetzen"},"Strings mit Zahlen zusammensetzen"),(0,a.kt)("p",null,"Strings k\xf6nnen auch mit allen ",(0,a.kt)("em",{parentName:"p"},"primitiven")," Datentypen, also auch mit numerischen Werten, durch das Plus-Zeichen ",(0,a.kt)("inlineCode",{parentName:"p"},"+")," zu einer Zeichenfolge kombiniert werden. Der ",(0,a.kt)("em",{parentName:"p"},"primitive")," Datentyp wird dadurch automatisch zu einem String!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="String mit Zahlen kombinieren"',title:'"String',mit:!0,Zahlen:!0,'kombinieren"':!0},'System.out.println("Ihre Geschwindigkeit lautet " + 21);\n//                  Ihre Geschwindigkeit lautet 21 \n')),(0,a.kt)("admonition",{title:"Eine Zahl in einen String umwandeln",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Werden Zahlen mit einem ",(0,a.kt)("strong",{parentName:"p"},'leeren String ""'),' konkatiniert, wird die Zahl alleine in einen String umgewandelt. Dies ist ein g\xe4ngiger Java "Hack".'),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Zahl in String umwandeln"',title:'"Zahl',in:!0,String:!0,'umwandeln"':!0},'String zahl = "" + 21;\n// zahl ist nun "21"\n'))),(0,a.kt)("h2",{id:"operatoren"},"Operatoren"),(0,a.kt)("h3",{id:"arithmetische------"},"Arithmetische ",(0,a.kt)("inlineCode",{parentName:"h3"},"+"),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"-"),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"/"),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"*"),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"%")),(0,a.kt)("p",null,"Arithmetische Operatoren kennt Ihr bereits von der Mathematik.\nDamit lassen sich die g\xe4ngigen Mathematischen Operationen durchf\xfchren.\nNeu ist einzig der Rest Operator ",(0,a.kt)("inlineCode",{parentName:"p"},"%"),". Dieser dividiert eine Zahl und gibt den Rest zur\xfcck."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="+ - / * % Arithmetische Operatoren"',title:'"+',"-":!0,"/":!0,"*":!0,"%":!0,Arithmetische:!0,'Operatoren"':!0},"int result;\nint number = 9;\nint anotherNumber = 3;\n\nresult = number + anotherNumber; // Addition\nresult = number - anotherNumber; // Subtraktion\nresult = number / anotherNumber; // Division\nresult = number * anotherNumber; // Multiplikation\nresult = number % anotherNumber; // Rest der Division\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Gerade/Ungerade berechnen mit ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"%")),(0,a.kt)("p",{parentName:"admonition"},"Der Rest-Operator ",(0,a.kt)("inlineCode",{parentName:"p"},"%")," gibt bei einer division immer den Rest zur\xfcck.\nWenn man nun eine Division durch 2 durchf\xfchrt l\xe4sst sich herausfinden ob eine Zahl gerade oder ungerade ist."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"9 % 2  // ergibt 4 * 2 Rest 1 also ungerade\n10 % 2 // ergibt 5 * 2 Rest 0 also gerade\n\npublic boolean even(int number) {\n    return number % 2 == 0;\n}\n"))),(0,a.kt)("h3",{id:"verk\xfcrzte-arithmetische-operation-mit-sich-selbst-----"},"Verk\xfcrzte arithmetische Operation mit sich selbst ",(0,a.kt)("inlineCode",{parentName:"h3"},"+="),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"-="),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"*="),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"/=")),(0,a.kt)("p",null,"Oft m\xf6chte man den Wert einer Variablen direkt ver\xe4ndern. Das Resultat also nicht in eine neue\nVariable, sonder in sich selber speichern. Gegeben ist z.B. die Variable ",(0,a.kt)("inlineCode",{parentName:"p"},"number")," vom Typ ",(0,a.kt)("inlineCode",{parentName:"p"},"int"),"\nmit dem Initialwert ",(0,a.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"int number = 3;\n")),(0,a.kt)("p",null,"M\xf6chte man dieser Variable ",(0,a.kt)("inlineCode",{parentName:"p"},"4")," hinzuaddieren geht das folgendermassen:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"number = number + 4; // Addition und Zuweisung zu sich selbst\n")),(0,a.kt)("p",null,"Da dies sehr oft vorkommt ist in allen g\xe4ngigen Programmiersprachen daf\xfcr ein\nkombinierten Operator vorgesehen. Es wird dem Zuweisungsoperator den arithmetische Operator ",(0,a.kt)("strong",{parentName:"p"},"vorangestellt"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"number += 4; // Verk\xfcrzte Addition und Zuweisung zu sich selbst\n")),(0,a.kt)("p",null,"Aus ",(0,a.kt)("inlineCode",{parentName:"p"},"number = number + 4;")," wird somit ",(0,a.kt)("inlineCode",{parentName:"p"},"number += 4;")," und erspart uns die Dopplung der Variable.\nDies geht nat\xfcrlich auch f\xfcr alle anderen arithmetischen Operatoren."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"number -= 7; // Subtraktion und Zuweisung zu sich selbst\nnumber *= 9; // Multiplikation und Zuweisung zu sich selbst\nnumber /= 2; // Division und Zuweisung zu sich selbst\n")),(0,a.kt)("h3",{id:"un\xe4re-einstellige-operatoren----"},"Un\xe4re (einstellige) Operatoren ",(0,a.kt)("inlineCode",{parentName:"h3"},"++"),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"--")),(0,a.kt)("p",null,"Noch h\xe4ufiger als die verk\xfcrzte arithmetische Operation mit sich selbst wird\nim Programmieren schrittweise hoch und runtergez\xe4hlt ",(0,a.kt)("strong",{parentName:"p"},"was auch Iteration genannt wird"),"."),(0,a.kt)("p",null,"M\xf6chte man also von 0 - 3 hochz\xe4hlen geht dies so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"int number = 0;\nnumber += 1;\nnumber += 1;\nnumber += 1;\n")),(0,a.kt)("p",null,"Der Un\xe4re Operator ",(0,a.kt)("inlineCode",{parentName:"p"},"++")," z\xe4hlt der links vorangestellten Variable eines nummerischen Typ eine 1 hinzu.\nDer obere Code ist somit identisch zu diesem:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"int number = 0;\nnumber++;\nnumber++;\nnumber++;\n")),(0,a.kt)("admonition",{title:"Un\xe4r => einstellig",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Un\xe4r bedeutet einstellig, es braucht daher ",(0,a.kt)("strong",{parentName:"p"},"nur der linke")," und nicht auch einen rechten Teil beim Operator.")),(0,a.kt)("admonition",{title:"Iterieren durch Arrays",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Der un\xe4re Operator ",(0,a.kt)("inlineCode",{parentName:"p"},"++")," wird insbesondere beim ",(0,a.kt)("strong",{parentName:"p"},"Iterieren durch Arrays")," wie im folgenden Beispiel verwendet.\nWas gibt der obere Code wohl aus?"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"char[] text = {'h','a','l','l','o',' ','w','e','l','t'};\n\n// highlight-next-line\nfor (int i = 0; i < text.length; i++) {\n    System.out.print(text[i]);\n}\n")),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Es wird Schrittweise jede Stelle vom Array ",(0,a.kt)("inlineCode",{parentName:"li"},"char[] text")," in einem ",(0,a.kt)("inlineCode",{parentName:"li"},"for"),"-Loop ausgegeben"),(0,a.kt)("li",{parentName:"ul"},"Die Variable ",(0,a.kt)("inlineCode",{parentName:"li"},"i"),", Iterator, wird durch ",(0,a.kt)("inlineCode",{parentName:"li"},"i++")," f\xfcr jeden Schritt +1 hochgez\xe4hlt"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"i++")," k\xf6nnte auch mit ",(0,a.kt)("inlineCode",{parentName:"li"},"i += 1")," oder ",(0,a.kt)("inlineCode",{parentName:"li"},"i = i + 1")," ersetzt werden."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"i++")," ist jedoch viel k\xfcrzer."))),(0,a.kt)("admonition",{title:"Funfact",type:"note"},(0,a.kt)("p",{parentName:"admonition"},"C++ erweitert die Programmiersprache C. Um diese Verwandtschaft ein bisschen NERDisch Auszudr\xfccken wurde das Wortspiel C++ gew\xe4hlt. C++ ist eine weitere Iteration von C.")),(0,a.kt)("h3",{id:"vergleichsoperatoren---"},"Vergleichsoperatoren ",(0,a.kt)("inlineCode",{parentName:"h3"},"=="),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"!="),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"!")),(0,a.kt)("p",null,"Vergleichsoperatoren ergeben immer einen ",(0,a.kt)("strong",{parentName:"p"},"boolean (true/false)"),". Sie werden in Kontrollstrukturen als Bedingungen verwendet."),(0,a.kt)("div",{className:"grid three"},(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="== Gleichheit"',title:'"','Gleichheit"':!0},"true  == true; // true\n1     == 1     // true\n\nfalse == true; // false\n1     == 2     // false\n"))),(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="!= Ungleichheit"',title:'"!','Ungleichheit"':!0},"false != true; // true\n1     != 2     // true\n\ntrue  != true; // false\n1     != 1     // false\n"))),(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="! Negation"',title:'"!','Negation"':!0},"!false // true\n!(1 == 2) // true\n\n!true // false\n!(1 == 1) // false\n")))),(0,a.kt)("h3",{id:"vergleichen-von-strings-equals"},"Vergleichen von Strings ",(0,a.kt)("inlineCode",{parentName:"h3"},"equals")),(0,a.kt)("p",null,"Strings, und andere h\xf6here Datentypen, k\xf6nnen ",(0,a.kt)("strong",{parentName:"p"},"nicht durch Vergleichsoperatoren verglichen werden"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"H\xf6here Datentypen sind Datentypen die durch ",(0,a.kt)("strong",{parentName:"li"},"Klassen")," definiert werden"),(0,a.kt)("li",{parentName:"ul"},"Diese sind ",(0,a.kt)("strong",{parentName:"li"},"immer gross geschrieben")),(0,a.kt)("li",{parentName:"ul"},"H\xf6here Datentypen besitzen die ",(0,a.kt)("strong",{parentName:"li"},"Methode ",(0,a.kt)("inlineCode",{parentName:"strong"},"equals")),' (was auf Deutsch "gleicht" heisst)')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String text = new String("Hallo Welt");\nString test2 = new String("Hallo Welt");\n\ntest == test2;     // false! Die Speicherorte der Objekte `text` und `text2` sind unterschiedlich\ntest.equals(test2) // true!  Der Inhalt von beiden Objekte ist jedoch gleich.\n')),(0,a.kt)("h4",{id:"wieso-ist-dies-nun-so"},"Wieso ist dies nun so?"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Technisch:")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Durch ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},'String text = new String("Hallo Welt");'))," wird ein ",(0,a.kt)("strong",{parentName:"li"},"Objekt")," erzeugt.\nDieses besitzt einen ",(0,a.kt)("strong",{parentName:"li"},"eigenen Speicherbereich")," in der Variable ",(0,a.kt)("inlineCode",{parentName:"li"},"text")),(0,a.kt)("li",{parentName:"ol"},"Durch ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},'String test2 = new String("Hallo Welt");'))," wird ebenfalls ein ",(0,a.kt)("strong",{parentName:"li"},"neues Objekt")," erzeugt.\nDieses besitzt wiederum einen ",(0,a.kt)("strong",{parentName:"li"},"eigenen Speicherbereich")," in der Variable ",(0,a.kt)("inlineCode",{parentName:"li"},"text2")),(0,a.kt)("li",{parentName:"ol"},"Werden nun die zwei Objekte durch ",(0,a.kt)("inlineCode",{parentName:"li"},"==")," verglichen, wird nicht deren Inhalt, sondern deren ",(0,a.kt)("strong",{parentName:"li"},"Speicherort verglichen"),"!"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Mit ",(0,a.kt)("inlineCode",{parentName:"strong"},"equals")," wird nun aber der Inhalt verglichen.")," Zwei Pakete mit dem gleichen Inhalt sind zwar eigenst\xe4ndig aber sie sind sich gleich.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Verst\xe4ndlich:")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Stellen wir uns ",(0,a.kt)("strong",{parentName:"li"},"ein Paket"),' vor, in welches von Hand ausgeschnittene Buchstaben "Hallo Welt" gelegt werden.'),(0,a.kt)("li",{parentName:"ol"},"Stellen wir uns ",(0,a.kt)("strong",{parentName:"li"},"ein zweites Paket"),' vor, in welches neue, von Hand ausgeschnittene Buchstaben, "Hallo Welt" gelegt werden.'),(0,a.kt)("li",{parentName:"ol"},"Zwei Pakete mit gleichem Inhalt sind auch in der uns bekannten Welt immer noch zwei unterschiedliche Pakete oder?",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Mit ",(0,a.kt)("inlineCode",{parentName:"strong"},"==")," werden die Pakete"),' und nicht deren Inhalt "Hallo Welt" verglichen.'))),(0,a.kt)("li",{parentName:"ol"},"Selbst wenn die von Hand ausgeschnitten Buchstaben nicht 100% gleich ausgeschnitten wurden ist ihre Bedeutung (Semantik) jedoch die gleiche.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Mit ",(0,a.kt)("inlineCode",{parentName:"strong"},"equals")," wird der Inhalt")," und nicht die Pakete verglichen.")))),(0,a.kt)("h4",{id:"und-wieso-darf-man-nun-primitiven-datentypen-mit--vergleichen"},"Und wieso darf man nun primitiven Datentypen mit == vergleichen?"),(0,a.kt)("p",null,"Primitive Datentypen sind in Java ",(0,a.kt)("strong",{parentName:"p"},"keine Objekte"),", sie werden somit nicht in ein Paket verpackt."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Die Nummer ",(0,a.kt)("inlineCode",{parentName:"li"},"4")," ist die Nummer ",(0,a.kt)("inlineCode",{parentName:"li"},"4"),". Fertig. Pasta."),(0,a.kt)("li",{parentName:"ul"},"Das Zeichen ",(0,a.kt)("inlineCode",{parentName:"li"},"c")," ist das Zeichen ",(0,a.kt)("inlineCode",{parentName:"li"},"c"),". Fertig. Pasta."),(0,a.kt)("li",{parentName:"ul"},'Aber der Satz "Hallo Welt" K\xf6nnte man',(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"alphabetisch sortieren"),(0,a.kt)("li",{parentName:"ul"},"gross schreiben"),(0,a.kt)("li",{parentName:"ul"},"klein schreiben"),(0,a.kt)("li",{parentName:"ul"},"...")))),(0,a.kt)("admonition",{title:"String ist eine Klasse",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Eigentlich m\xfcsste man einen String wie folgt initialisieren:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String text = new String("String ist eine Klasse und kann somit auch mit new initialisiert werden");\n')),(0,a.kt)("p",{parentName:"admonition"},"Da jedoch so oft Strings verwendet werden und die Klasse somit fest in die Sprache verankert ist, ",(0,a.kt)("strong",{parentName:"p"},"wurde Ihr\ndurch den Kompiler ein paar Sonderheiten verliehen"),". So kann das ",(0,a.kt)("inlineCode",{parentName:"p"},"new String()")," weggelassen werden."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String text = "String ist eine Klasse und kann somit auch mit new initialisiert werden";\n')),(0,a.kt)("p",{parentName:"admonition"},"Beim kompilieren wird das ",(0,a.kt)("inlineCode",{parentName:"p"},"new String()")," automatisch hinzugef\xfcgt!")),(0,a.kt)("admonition",{title:"Compiler sind schlau!",type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},'"Hallo Welt" == "Hallo Welt";')," ist ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". Dies ist eine Ausnahme, da der Kompiler schlau ist und merkt, dass hier nicht zwei Objekte ben\xf6tigt werden.\nDer Kompiler versucht Speicher zu sparen. Sobald aber zwei Strings dynamisch erstellt werden (",(0,a.kt)("inlineCode",{parentName:"p"},"new"),") geht dies nicht mehr!")),(0,a.kt)("admonition",{title:"Nicht alle Programmiersprachen sind gleich",type:"note"},(0,a.kt)("p",{parentName:"admonition"},"In ",(0,a.kt)("a",{parentName:"p",href:"https://www.ruby-lang.org"},"Ruby")," ist z.B. alles ein Objekt. Auch Zahlen. Da gehen lustige Dinge wie:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://guides.rubyonrails.org/active_support_core_extensions.html#extensions-to-integer-time"},(0,a.kt)("inlineCode",{parentName:"a"},"print 3.month.from_now"))," gibt das Datum von in drei Monaten zur\xfcck"),(0,a.kt)("li",{parentName:"ul"},"oder ",(0,a.kt)("a",{parentName:"li",href:"https://apidock.com/ruby/Integer/times"},(0,a.kt)("inlineCode",{parentName:"a"},'3.times { print "Hallo Welt" }')),' gibt 3 Mal "Hallo Welt" aus'))),(0,a.kt)("h2",{id:"kontrollstrukturen"},"Kontrollstrukturen"),(0,a.kt)("h3",{id:"if"},"if"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="if-Kontrollstrucktur"',title:'"if-Kontrollstrucktur"'},"if (bedingung1) {\n  // block of code to be executed if condition1 is true\n} else if (bedingung2) {\n  // block of code to be executed if the condition1 is false and condition2 is true\n} else {\n  // block of code to be executed if the condition1 is false and condition2 is false\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="if Beispiel"',title:'"if','Beispiel"':!0},'int time = 22;\nif (time < 10) {\n  System.out.println("Good morning.");\n} else if (time < 18) {\n  System.out.println("Good day.");\n} else {\n  System.out.println("Good evening.");\n}\n// Outputs "Good evening." (else).\n')),(0,a.kt)("h3",{id:"switch"},"switch"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="switch"',title:'"switch"'},"switch(expression) {\n  case x:\n    // code block\n    break;\n  case y:\n    // code block\n    break;\n  default:\n    // code block\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'int day = 4;\nswitch (day) {\n  case 1:\n    System.out.println("Monday");\n    break;\n  case 2:\n    System.out.println("Tuesday");\n    break;\n  case 3:\n    System.out.println("Wednesday");\n    break;\n  case 4:\n    System.out.println("Thursday");\n    break;\n  case 5:\n    System.out.println("Friday");\n    break;\n  case 6:\n    System.out.println("Saturday");\n    break;\n  case 7:\n    System.out.println("Sunday");\n    break;\n}\n// Outputs "Thursday" (day 4)\n')),(0,a.kt)("h2",{id:""}))}d.isMDXComponent=!0}}]);