"use strict";(self.webpackChunkbbzbl_modul_404=self.webpackChunkbbzbl_modul_404||[]).push([[9915],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=i.createContext({}),d=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=d(e.components);return i.createElement(o.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},k=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=d(t),k=a,h=p["".concat(o,".").concat(k)]||p[k]||u[k]||r;return t?i.createElement(h,l(l({ref:n},m),{},{components:t})):i.createElement(h,l({ref:n},m))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=k;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var d=2;d<r;d++)l[d]=t[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}k.displayName="MDXCreateElement"},7708:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=t(7462),a=(t(7294),t(3905));const r={},l="Basics",s={unversionedId:"repetition/basics",id:"repetition/basics",title:"Basics",description:"Hier werden nochmals in k\xfcrze alle Konzepte vom Modul 319 aufgef\xfchrt",source:"@site/docs/repetition/basics.md",sourceDirName:"repetition",slug:"/repetition/basics",permalink:"/bbzbl-modul-404/docs/repetition/basics",draft:!1,editUrl:"https://github.com/codingluke/bbzbl-modul-404/tree/main/docs/repetition/basics.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Arrays",permalink:"/bbzbl-modul-404/docs/repetition/arrays"},next:{title:"Aufgaben Grundlagen",permalink:"/bbzbl-modul-404/docs/category/aufgaben-grundlagen"}},o={},d=[{value:"Variablen",id:"variablen",level:2},{value:"<em>Primitive</em> Datentypen",id:"primitive-datentypen",level:3},{value:"Initialisierung",id:"initialisierung",level:3},{value:"Der Datentyp <code>String</code>",id:"der-datentyp-string",level:3},{value:"Strings initialisieren",id:"strings-initialisieren",level:3},{value:"Strings zusammensetzen",id:"strings-zusammensetzen",level:3},{value:"Strings mit Zahlen zusammensetzen",id:"strings-mit-zahlen-zusammensetzen",level:3},{value:"Operatoren",id:"operatoren",level:2},{value:"Arithmetische <code>+</code>, <code>-</code>, <code>/</code>, <code>*</code>, <code>%</code>",id:"arithmetische------",level:3},{value:"Verk\xfcrzte arithmetische Operation mit sich selbst <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>",id:"verk\xfcrzte-arithmetische-operation-mit-sich-selbst-----",level:3},{value:"Un\xe4re (einstellige) Operatoren <code>++</code>, <code>--</code>",id:"un\xe4re-einstellige-operatoren----",level:3},{value:"Vergleichsoperatoren <code>==</code>, <code>!=</code>, <code>!</code>",id:"vergleichsoperatoren---",level:3},{value:"Vergleichen von Strings <code>equals</code>",id:"vergleichen-von-strings-equals",level:3},{value:"Wieso ist dies nun so?",id:"wieso-ist-dies-nun-so",level:4},{value:"Und wieso darf man nun primitiven Datentypen mit == vergleichen?",id:"und-wieso-darf-man-nun-primitiven-datentypen-mit--vergleichen",level:4},{value:"Kontrollstrukturen",id:"kontrollstrukturen",level:2},{value:"if-Kontrollstrucktur",id:"if-kontrollstrucktur",level:3},{value:"if-Beispiel",id:"if-beispiel",level:3},{value:"switch",id:"switch",level:3},{value:"Switch-Beispiel",id:"switch-beispiel",level:3},{value:"Methoden",id:"methoden",level:2}],m={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"basics"},"Basics"),(0,a.kt)("p",null,"Hier werden nochmals in k\xfcrze alle Konzepte vom Modul 319 aufgef\xfchrt"),(0,a.kt)("h2",{id:"variablen"},"Variablen"),(0,a.kt)("p",null,"Variablen sind Platzhalter um Werte zu Speichern."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Jede Variable reserviert einen Speicherplatz im Computerspeicher"),(0,a.kt)("li",{parentName:"ul"},"Durch den eindeutigen Namen kann auf diesen Speicherplatz zugegriffen werden")),(0,a.kt)("p",null,"Um eine Variable zu definieren muss ein ",(0,a.kt)("strong",{parentName:"p"},"Type"),", einen ",(0,a.kt)("strong",{parentName:"p"},"Namen")," und einen\n",(0,a.kt)("strong",{parentName:"p"},"Wert")," angegeben werden."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Variable syntax"',title:'"Variable','syntax"':!0},"type variableName = value;\n")),(0,a.kt)("h3",{id:"primitive-datentypen"},(0,a.kt)("em",{parentName:"h3"},"Primitive")," Datentypen"),(0,a.kt)("p",null,"In Java gibt es eine beachtliche Anzahl an Datentypen gem\xe4ss folgender Tabelle.\nVorerst nutzen wir die ",(0,a.kt)("em",{parentName:"p"},"primitiven")," Datentypen. Diese sind erkennbar, indem der\n",(0,a.kt)("strong",{parentName:"p"},"Datentyp kleingeschrieben")," ist."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Datentyp"),(0,a.kt)("th",{parentName:"tr",align:null},"Gr\xf6sse"),(0,a.kt)("th",{parentName:"tr",align:null},"Beschreibung"),(0,a.kt)("th",{parentName:"tr",align:null},"Spezifika"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"1 bit"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert ",(0,a.kt)("inlineCode",{parentName:"td"},"true")," ",(0,a.kt)("em",{parentName:"td"},"(wahr)")," oder ",(0,a.kt)("inlineCode",{parentName:"td"},"false")," ",(0,a.kt)("em",{parentName:"td"},"(falsch)")," Werte"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"byte"),(0,a.kt)("td",{parentName:"tr",align:null},"1 byte"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert ganze Zahlen von ",(0,a.kt)("inlineCode",{parentName:"td"},"-128")," bis ",(0,a.kt)("inlineCode",{parentName:"td"},"127")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"short"),(0,a.kt)("td",{parentName:"tr",align:null},"2 bytes"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert ganze Zahlen von ",(0,a.kt)("inlineCode",{parentName:"td"},"-32'768")," bis ",(0,a.kt)("inlineCode",{parentName:"td"},"32'767")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"char"),(0,a.kt)("td",{parentName:"tr",align:null},"2 bytes"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert ein einzelnes Zeichen oder ",(0,a.kt)("a",{parentName:"td",href:"https://de.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange"},"ASCII")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"''"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"int"),(0,a.kt)("td",{parentName:"tr",align:null},"4 bytes"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert ganze Zahlen ",(0,a.kt)("inlineCode",{parentName:"td"},"-2'147'483'648")," bis ",(0,a.kt)("inlineCode",{parentName:"td"},"2'147'483'647")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"float"),(0,a.kt)("td",{parentName:"tr",align:null},"4 bytes"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert Gleitkommazahlen von ",(0,a.kt)("inlineCode",{parentName:"td"},"6")," bis ",(0,a.kt)("inlineCode",{parentName:"td"},"7")," Dezimalstellen"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"f"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"long"),(0,a.kt)("td",{parentName:"tr",align:null},"8 bytes"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert ganze Zahlen von ",(0,a.kt)("inlineCode",{parentName:"td"},"-9'223'372'036'854'775'808l")," bis ",(0,a.kt)("inlineCode",{parentName:"td"},"9'223'372'036'854'775'807l")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"l"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"double"),(0,a.kt)("td",{parentName:"tr",align:null},"8 bytes"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert Gleitkommazahlen von ",(0,a.kt)("inlineCode",{parentName:"td"},"15")," Dezimalstellen"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"d"))))),(0,a.kt)("h3",{id:"initialisierung"},"Initialisierung"),(0,a.kt)("p",null,"Beispiele, wie Variablen initialisiert werden k\xf6nnen. Die Leerzeichen dienen nur\nder \xdcbersichtlichkeit."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Deklarierung von Variablen"',title:'"Deklarierung',von:!0,'Variablen"':!0},"// Datentyp     Variablenname  Semikolon\n   int          number         ;\n   char         sign           ;\n   ...\n")),(0,a.kt)("p",null,"Die Initialisierung der Werte verwendet spezifische Zeichen f\xfcr die\nverscheidenen Datentypen. So endet ein ",(0,a.kt)("inlineCode",{parentName:"p"},"float"),"-Wert immer mit ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," oder ",(0,a.kt)("inlineCode",{parentName:"p"},"long"),"\nmit ",(0,a.kt)("inlineCode",{parentName:"p"},"l"),'. Die Spezifikas pro Datentyp finden Sie in der Tabelle oberhalb unter\n"Spezifika".'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Deklarierung & Initialisierung von Variablen"',title:'"Deklarierung',"&":!0,Initialisierung:!0,von:!0,'Variablen"':!0},"\n// Datentyp     Variablenname  Zuweiseoperator   Wert  Semikolon\n   int          number         =                 5     ;\n   char         sign           =                 'c'   ;\n   //                                            ^ ^  spezifisch f\xfcr char sind ('')\n   long         longNumber     =                 123l  ;\n   //                                               ^ spezifisch f\xfcr long (l)\n   ...\n")),(0,a.kt)("h3",{id:"der-datentyp-string"},"Der Datentyp ",(0,a.kt)("inlineCode",{parentName:"h3"},"String")),(0,a.kt)("p",null,"Der Datentyp ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," ",(0,a.kt)("strong",{parentName:"p"},"dient zur Speicherung von Zeichenfolgen"),", also\nallgemeiner Text. Der Text muss immer zwischen zwei ",(0,a.kt)("strong",{parentName:"p"},'"doppelten\nAnf\xfchrungszeichen"')," gestellt werden."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Datentyp"),(0,a.kt)("th",{parentName:"tr",align:null},"Gr\xf6sse"),(0,a.kt)("th",{parentName:"tr",align:null},"Beschreibung"),(0,a.kt)("th",{parentName:"tr",align:null},"Spezifika"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"String"),(0,a.kt)("td",{parentName:"tr",align:null},"2 byte pro Zeichen"),(0,a.kt)("td",{parentName:"tr",align:null},"Speichert beliebigen Text"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},'""'))))),(0,a.kt)("h3",{id:"strings-initialisieren"},"Strings initialisieren"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// Datentyp     Variablenname  Zuweiseoperator   Wert   Semikolon\n   String       zeichenFolge   =                 "abc"  ;\n//                                               ^   ^\n//                                   "doppelten Anf\xfchrungszeichen"\n')),(0,a.kt)("h3",{id:"strings-zusammensetzen"},"Strings zusammensetzen"),(0,a.kt)("p",null,"Mehrere Variablen vom Datentyp ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," k\xf6nnen durch ein Plus-Zeichen ",(0,a.kt)("inlineCode",{parentName:"p"},"+"),"\nzusammengesetzt werden. Dabei sollte man darauf achten, dass der erste Text mit\neinem Leerzeichen enden soll. Wieso, sieht ihr im Beispiel:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Mit + Strings zusammensetzen"',title:'"Mit',"+":!0,Strings:!0,'zusammensetzen"':!0},'String name = "Mr Robot";\nSystem.out.println("Your name is " + name);\n//                              ^ Leerzeichen!\n//                  Your name is Mr Robot\n\nSystem.out.println("Your name is" + name);\n//                  Your name isMr Robot\n')),(0,a.kt)("admonition",{title:"H\xf6here Datentypen sind Grossgeschrieben",type:"note"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"String")," ist Gross geschrieben, da es sich um einen ",(0,a.kt)("em",{parentName:"li"},"h\xf6heren")," Datentyp\nhandelt."),(0,a.kt)("li",{parentName:"ul"},"Ein ",(0,a.kt)("inlineCode",{parentName:"li"},"String")," baut auf dem ",(0,a.kt)("em",{parentName:"li"},"primitiven")," Datentyp ",(0,a.kt)("inlineCode",{parentName:"li"},"char")," auf ",(0,a.kt)("em",{parentName:"li"},"(\ud83d\udca1 daher\nh\xf6her)"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},'Evt. Hilft die Analogie von "Atome (primitiv)" zu "Molek\xfcle (h\xf6her)".'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"H\xf6here")," Datentypen sind auch Objekte.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Was Objekte genau sind, erfahrt ihr im Folgemodul 404 und ist noch nicht\nrelevant!"))))),(0,a.kt)("h3",{id:"strings-mit-zahlen-zusammensetzen"},"Strings mit Zahlen zusammensetzen"),(0,a.kt)("p",null,"Strings k\xf6nnen auch mit allen ",(0,a.kt)("em",{parentName:"p"},"primitiven")," Datentypen, also auch mit numerischen\nWerten, durch das Plus-Zeichen ",(0,a.kt)("inlineCode",{parentName:"p"},"+")," zu einer Zeichenfolge kombiniert werden. Der\n",(0,a.kt)("em",{parentName:"p"},"primitive")," Datentyp wird dadurch automatisch zu einem String!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="String mit Zahlen kombinieren"',title:'"String',mit:!0,Zahlen:!0,'kombinieren"':!0},'System.out.println("Ihre Geschwindigkeit lautet " + 21);\n//                  Ihre Geschwindigkeit lautet 21\n')),(0,a.kt)("admonition",{title:"Eine Zahl in einen String umwandeln",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Werden Zahlen mit einem ",(0,a.kt)("strong",{parentName:"p"},'leeren String ""'),' konkatiniert, wird die Zahl alleine\nin einen String umgewandelt. Dies ist ein g\xe4ngiger Java "Hack".'),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Zahl in String umwandeln"',title:'"Zahl',in:!0,String:!0,'umwandeln"':!0},'String zahl = "" + 21;\n// zahl ist nun "21"\n'))),(0,a.kt)("h2",{id:"operatoren"},"Operatoren"),(0,a.kt)("h3",{id:"arithmetische------"},"Arithmetische ",(0,a.kt)("inlineCode",{parentName:"h3"},"+"),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"-"),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"/"),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"*"),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"%")),(0,a.kt)("p",null,"Arithmetische Operatoren kennt Ihr bereits von der Mathematik. Damit lassen sich\ndie g\xe4ngigen Mathematischen Operationen durchf\xfchren. Neu ist einzig der Rest\nOperator ",(0,a.kt)("inlineCode",{parentName:"p"},"%"),". Dieser dividiert eine Zahl und gibt den Rest zur\xfcck."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="+ - / * % Arithmetische Operatoren"',title:'"+',"-":!0,"/":!0,"*":!0,"%":!0,Arithmetische:!0,'Operatoren"':!0},"int result;\nint number = 9;\nint anotherNumber = 3;\n\nresult = number + anotherNumber; // Addition\nresult = number - anotherNumber; // Subtraktion\nresult = number / anotherNumber; // Division\nresult = number * anotherNumber; // Multiplikation\nresult = number % anotherNumber; // Rest der Division\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Gerade/Ungerade berechnen mit ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"%")),(0,a.kt)("p",{parentName:"admonition"},"Der Rest-Operator ",(0,a.kt)("inlineCode",{parentName:"p"},"%")," gibt bei einer division immer den Rest zur\xfcck. Wenn man\nnun eine Division durch 2 durchf\xfchrt l\xe4sst sich herausfinden ob eine Zahl gerade\noder ungerade ist."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"9 % 2  // ergibt 4 * 2 Rest 1 also ungerade\n10 % 2 // ergibt 5 * 2 Rest 0 also gerade\n\npublic boolean even(int number) {\n    return number % 2 == 0;\n}\n"))),(0,a.kt)("h3",{id:"verk\xfcrzte-arithmetische-operation-mit-sich-selbst-----"},"Verk\xfcrzte arithmetische Operation mit sich selbst ",(0,a.kt)("inlineCode",{parentName:"h3"},"+="),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"-="),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"*="),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"/=")),(0,a.kt)("p",null,"Oft m\xf6chte man den Wert einer Variablen direkt ver\xe4ndern. Das Resultat also\nnicht in eine neue Variable, sonder in sich selber speichern. Gegeben ist z.B.\ndie Variable ",(0,a.kt)("inlineCode",{parentName:"p"},"number")," vom Typ ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," mit dem Initialwert ",(0,a.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"int number = 3;\n")),(0,a.kt)("p",null,"M\xf6chte man dieser Variable ",(0,a.kt)("inlineCode",{parentName:"p"},"4")," hinzuaddieren geht das folgendermassen:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"number = number + 4; // Addition und Zuweisung zu sich selbst\n")),(0,a.kt)("p",null,"Da dies sehr oft vorkommt ist in allen g\xe4ngigen Programmiersprachen daf\xfcr ein\nkombinierten Operator vorgesehen. Es wird dem Zuweisungsoperator den\narithmetische Operator ",(0,a.kt)("strong",{parentName:"p"},"vorangestellt"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"number += 4; // Verk\xfcrzte Addition und Zuweisung zu sich selbst\n")),(0,a.kt)("p",null,"Aus ",(0,a.kt)("inlineCode",{parentName:"p"},"number = number + 4;")," wird somit ",(0,a.kt)("inlineCode",{parentName:"p"},"number += 4;")," und erspart uns die\nDopplung der Variable. Dies geht nat\xfcrlich auch f\xfcr alle anderen arithmetischen\nOperatoren."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"number -= 7; // Subtraktion und Zuweisung zu sich selbst\nnumber *= 9; // Multiplikation und Zuweisung zu sich selbst\nnumber /= 2; // Division und Zuweisung zu sich selbst\n")),(0,a.kt)("h3",{id:"un\xe4re-einstellige-operatoren----"},"Un\xe4re (einstellige) Operatoren ",(0,a.kt)("inlineCode",{parentName:"h3"},"++"),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"--")),(0,a.kt)("p",null,"Noch h\xe4ufiger als die verk\xfcrzte arithmetische Operation mit sich selbst wird im\nProgrammieren schrittweise hoch und runtergez\xe4hlt ",(0,a.kt)("strong",{parentName:"p"},"was auch Iteration genannt\nwird"),"."),(0,a.kt)("p",null,"M\xf6chte man also von 0 - 3 hochz\xe4hlen geht dies so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"int number = 0;\nnumber += 1;\nnumber += 1;\nnumber += 1;\n")),(0,a.kt)("p",null,"Der Un\xe4re Operator ",(0,a.kt)("inlineCode",{parentName:"p"},"++")," z\xe4hlt der links vorangestellten Variable eines\nnummerischen Typ eine 1 hinzu. Der obere Code ist somit identisch zu diesem:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"int number = 0;\nnumber++;\nnumber++;\nnumber++;\n")),(0,a.kt)("admonition",{title:"Un\xe4r => einstellig",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Un\xe4r bedeutet einstellig, es braucht daher ",(0,a.kt)("strong",{parentName:"p"},"nur der linke")," und nicht auch\neinen rechten Teil beim Operator.")),(0,a.kt)("admonition",{title:"Iterieren durch Arrays",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Der un\xe4re Operator ",(0,a.kt)("inlineCode",{parentName:"p"},"++")," wird insbesondere beim ",(0,a.kt)("strong",{parentName:"p"},"Iterieren durch Arrays")," wie im\nfolgenden Beispiel verwendet. Was gibt der obere Code wohl aus?"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"char[] text = {'h','a','l','l','o',' ','w','e','l','t'};\n\n// highlight-next-line\nfor (int i = 0; i < text.length; i++) {\n    System.out.print(text[i]);\n}\n")),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Es wird Schrittweise jede Stelle vom Array ",(0,a.kt)("inlineCode",{parentName:"li"},"char[] text")," in einem ",(0,a.kt)("inlineCode",{parentName:"li"},"for"),"-Loop\nausgegeben"),(0,a.kt)("li",{parentName:"ul"},"Die Variable ",(0,a.kt)("inlineCode",{parentName:"li"},"i"),", Iterator, wird durch ",(0,a.kt)("inlineCode",{parentName:"li"},"i++")," f\xfcr jeden Schritt +1 hochgez\xe4hlt"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"i++")," k\xf6nnte auch mit ",(0,a.kt)("inlineCode",{parentName:"li"},"i += 1")," oder ",(0,a.kt)("inlineCode",{parentName:"li"},"i = i + 1")," ersetzt werden."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"i++")," ist jedoch viel k\xfcrzer."))),(0,a.kt)("admonition",{title:"Funfact",type:"note"},(0,a.kt)("p",{parentName:"admonition"},"C++ erweitert die Programmiersprache C. Um diese Verwandtschaft ein bisschen\nNERDisch Auszudr\xfccken wurde das Wortspiel C++ gew\xe4hlt. C++ ist eine weitere\nIteration von C.")),(0,a.kt)("h3",{id:"vergleichsoperatoren---"},"Vergleichsoperatoren ",(0,a.kt)("inlineCode",{parentName:"h3"},"=="),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"!="),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"!")),(0,a.kt)("p",null,"Vergleichsoperatoren ergeben immer einen ",(0,a.kt)("strong",{parentName:"p"},"boolean (true/false)"),". Sie werden in\nKontrollstrukturen als Bedingungen verwendet."),(0,a.kt)("div",{className:"grid three"},(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="== Gleichheit"',title:'"','Gleichheit"':!0},"true  == true; // true\n1     == 1     // true\n\nfalse == true; // false\n1     == 2     // false\n"))),(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="!= Ungleichheit"',title:'"!','Ungleichheit"':!0},"false != true; // true\n1     != 2     // true\n\ntrue  != true; // false\n1     != 1     // false\n"))),(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="! Negation"',title:'"!','Negation"':!0},"!false // true\n!(1 == 2) // true\n\n!true // false\n!(1 == 1) // false\n")))),(0,a.kt)("h3",{id:"vergleichen-von-strings-equals"},"Vergleichen von Strings ",(0,a.kt)("inlineCode",{parentName:"h3"},"equals")),(0,a.kt)("p",null,"Strings und andere h\xf6here Datentypen, k\xf6nnen ",(0,a.kt)("strong",{parentName:"p"},"nicht durch Vergleichsoperatoren\nverglichen werden"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"H\xf6here Datentypen sind Datentypen die durch ",(0,a.kt)("strong",{parentName:"li"},"Klassen")," definiert werden"),(0,a.kt)("li",{parentName:"ul"},"Diese sind ",(0,a.kt)("strong",{parentName:"li"},"immer gross geschrieben")),(0,a.kt)("li",{parentName:"ul"},"H\xf6here Datentypen besitzen die ",(0,a.kt)("strong",{parentName:"li"},"Methode ",(0,a.kt)("inlineCode",{parentName:"strong"},"equals")),' (was auf Deutsch "gleicht"\nheisst)')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String text = new String("Hallo Welt");\nString text2 = new String("Hallo Welt");\n\ntext == text2;     // false! Die Speicherorte der Objekte `text` und `text2` sind unterschiedlich\ntext.equals(text2) // true!  Der Inhalt von beiden Objekte ist jedoch gleich.\n')),(0,a.kt)("h4",{id:"wieso-ist-dies-nun-so"},"Wieso ist dies nun so?"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Technisch:")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Durch ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},'String text = new String("Hallo Welt");'))," wird ein ",(0,a.kt)("strong",{parentName:"li"},"Objekt"),"\nerzeugt. Dieses besitzt einen ",(0,a.kt)("strong",{parentName:"li"},"eigenen Speicherbereich")," in der Variable\n",(0,a.kt)("inlineCode",{parentName:"li"},"text")),(0,a.kt)("li",{parentName:"ol"},"Durch ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},'String text2 = new String("Hallo Welt");'))," wird ebenfalls ein\n",(0,a.kt)("strong",{parentName:"li"},"neues Objekt")," erzeugt. Dieses besitzt wiederum einen ",(0,a.kt)("strong",{parentName:"li"},"eigenen\nSpeicherbereich")," in der Variable ",(0,a.kt)("inlineCode",{parentName:"li"},"text2")),(0,a.kt)("li",{parentName:"ol"},"Werden nun die zwei Objekte durch ",(0,a.kt)("inlineCode",{parentName:"li"},"==")," verglichen, wird nicht deren Inhalt,\nsondern deren ",(0,a.kt)("strong",{parentName:"li"},"Speicherort verglichen"),"!"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Mit ",(0,a.kt)("inlineCode",{parentName:"strong"},"equals")," wird nun aber der Inhalt verglichen.")," Zwei Pakete mit dem\ngleichen Inhalt sind zwar eigenst\xe4ndig, aber sie sind sich gleich.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Verst\xe4ndlich:")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Stellen wir uns ",(0,a.kt)("strong",{parentName:"li"},"ein Paket"),", Paket1, vor, in welches die Druckletter\nH,a,l,l,o, ,W,e,l und t gelegt werden"),(0,a.kt)("li",{parentName:"ol"},"Stellen wir uns ",(0,a.kt)("strong",{parentName:"li"},"ein zweites Paket"),", Paket2, vor, in welches ebenfalls die\nDruckletter H,a,l,l,o, ,W,e,l und t gelegt werden"),(0,a.kt)("li",{parentName:"ol"},"Zwei Pakete mit gleichem Inhalt sind auch in der uns bekannten Welt immer\nnoch zwei unterschiedliche Pakete, oder?",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Mit ",(0,a.kt)("inlineCode",{parentName:"strong"},"==")," werden die Pakete"),' und nicht deren Inhalt "Hallo Welt"\nverglichen.'))),(0,a.kt)("li",{parentName:"ol"},"Vergleicht man jedoch der Inhalt befinden sich in beiden Paketen die gleichen\nDruckletter in der gleichen Reihenfolge.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Mit ",(0,a.kt)("inlineCode",{parentName:"strong"},"equals")," wird der Inhalt")," und nicht die Pakete verglichen.")))),(0,a.kt)("h4",{id:"und-wieso-darf-man-nun-primitiven-datentypen-mit--vergleichen"},"Und wieso darf man nun primitiven Datentypen mit == vergleichen?"),(0,a.kt)("p",null,"Primitive Datentypen sind in Java ",(0,a.kt)("strong",{parentName:"p"},"keine Objekte"),", sie werden somit nicht in\nein Paket verpackt."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Die Nummer ",(0,a.kt)("inlineCode",{parentName:"li"},"4")," ist die Nummer ",(0,a.kt)("inlineCode",{parentName:"li"},"4"),". Punkt."),(0,a.kt)("li",{parentName:"ul"},"Das Zeichen ",(0,a.kt)("inlineCode",{parentName:"li"},"c")," ist das Zeichen ",(0,a.kt)("inlineCode",{parentName:"li"},"c"),". Punkt."),(0,a.kt)("li",{parentName:"ul"},'Aber der Satz "Hallo Welt" k\xf6nnte man',(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"alphabetisch sortieren"),(0,a.kt)("li",{parentName:"ul"},"gross schreiben"),(0,a.kt)("li",{parentName:"ul"},"klein schreiben"),(0,a.kt)("li",{parentName:"ul"},"...")))),(0,a.kt)("admonition",{title:"String ist eine Klasse und somit ein Objekt",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Eigentlich m\xfcsste man einen ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," wie folgt initialisieren:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String text = new String("String ist eine Klasse und kann somit auch mit new initialisiert werden");\n')),(0,a.kt)("p",{parentName:"admonition"},"Da jedoch so oft Strings verwendet werden und die Klasse somit fest in die\nSprache verankert ist, ",(0,a.kt)("strong",{parentName:"p"},"wurde Ihr durch den Compiler ein paar Sonderheiten\nverliehen"),". So kann das ",(0,a.kt)("inlineCode",{parentName:"p"},"new String()")," weggelassen werden."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String text = "String ist eine Klasse und kann somit auch mit new initialisiert werden";\n')),(0,a.kt)("p",{parentName:"admonition"},"Beim kompilieren wird das ",(0,a.kt)("inlineCode",{parentName:"p"},"new String()")," automatisch hinzugef\xfcgt!")),(0,a.kt)("admonition",{title:"Compiler sind schlau!",type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},'"Hallo Welt" == "Hallo Welt";')," ist ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". Dies ist eine Ausnahme, da der\nCompiler schlau ist und merkt, dass hier nicht zwei Objekte ben\xf6tigt werden. Der\nCompiler versucht Speicher zu sparen. Sobald aber zwei Strings dynamisch\nerstellt werden (",(0,a.kt)("inlineCode",{parentName:"p"},"new"),") geht dies nicht mehr!"),(0,a.kt)("p",{parentName:"admonition"},"Nach dem compilieren sieht das in etwa wo aus:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String text = new String("Hallo Welt");\ntext == text; // true da gleiches Objekt und Speicherort!\n'))),(0,a.kt)("admonition",{title:"Nicht alle Programmiersprachen sind gleich",type:"note"},(0,a.kt)("p",{parentName:"admonition"},"In ",(0,a.kt)("a",{parentName:"p",href:"https://www.ruby-lang.org"},"Ruby")," ist z.B. alles ein Objekt. Auch Zahlen. Da\ngehen lustige Dinge wie:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://guides.rubyonrails.org/active_support_core_extensions.html#extensions-to-integer-time"},(0,a.kt)("inlineCode",{parentName:"a"},"print 3.month.from_now")),"\ngibt das Datum von in drei Monaten zur\xfcck"),(0,a.kt)("li",{parentName:"ul"},"oder\n",(0,a.kt)("a",{parentName:"li",href:"https://apidock.com/ruby/Integer/times"},(0,a.kt)("inlineCode",{parentName:"a"},'3.times { print "Hallo Welt" }')),'\ngibt 3 Mal "Hallo Welt" aus'))),(0,a.kt)("h2",{id:"kontrollstrukturen"},"Kontrollstrukturen"),(0,a.kt)("h3",{id:"if-kontrollstrucktur"},"if-Kontrollstrucktur"),(0,a.kt)("div",{class:"grid"},(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Pseudo-Code"',title:'"Pseudo-Code"'},"// highlight-start\nif (<Bedingung1>) {\n  // Codeblock bei wahrer bedingung1\n  <Anweisung1>\n}\n// highlight-end\n// highlight-green-start\nelse if (<Bedingung2>) {\n  // Codeblock bei\n  //   - unwahrer bedingung1\n  //   - aber wahrer bedingung2\n  <Anweisung2>\n}\n// highlight-green-end\n// highlight-blue-start\nelse {\n  // Codeblock bei\n  //   - unwahrer bedingung1\n  //   - unwahrer bedingung2\n  <Anweisung3>\n}\n// highlight-blue-end\n"))),(0,a.kt)("div",null,(0,a.kt)("mermaid",{value:'flowchart TD\n    C{Wertestand}\n    C --\x3e|"if\\n< Bedingung1 >"| D["< Anweisung1 >"]\n    C --\x3e|"else if\\n< Bedingung2 >"| E["< Anweisung2 >"]\n    C --\x3e|else| F["< Anweisung3 >"]\n\n    style E fill:#00A17020,stroke:#00A17080,stroke-width:2px\n    style F fill:#0072B520,stroke:#0072B580,stroke-width:2px'}))),(0,a.kt)("h3",{id:"if-beispiel"},"if-Beispiel"),(0,a.kt)("div",{class:"grid"},(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="if Beispiel"',title:'"if','Beispiel"':!0},'int time = 22;\n// highlight-red-next-line\nif (time < 10) {\n  System.out.println("Good morning.");\n// highlight-red-next-line\n} else if (time < 18) {\n  System.out.println("Good day.");\n} else {\n  // highlight-yellow-next-line\n  System.out.println("Good evening.");\n}\n// Outputs "Good evening." (else).\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Es wird der Code-Block von ",(0,a.kt)("inlineCode",{parentName:"li"},"else")," ausgef\xfchrt, da die Variabe ",(0,a.kt)("inlineCode",{parentName:"li"},"time")," sowohl\ngr\xf6sser als 10 wie auch wie auch gr\xf6sser als 18 ist."))),(0,a.kt)("div",null,(0,a.kt)("mermaid",{value:'flowchart TD\n    C{time = 22}\n    C --\x3e|"if (time < 10)"| D["Good morning."]\n    C --\x3e|"else if (time < 18)"| E["Good day."]\n    C --\x3e|else| F["Good evening"]\n\n    style F fill:#FFFF0020,stroke:#aaaa0060,stroke-width:2px'}))),(0,a.kt)("h3",{id:"switch"},"switch"),(0,a.kt)("div",{class:"grid"},(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Pseudo-Code"',title:'"Pseudo-Code"'},"switch(wert) {\n  case vergleichsWert1:\n    <Anweisung1>;\n    // ohne `break` wird auch <Anweisung2>\n    // bis zum `break` ausgef\xfchrt.\n  // highlight-green-start\n  case vergleichsWert2:\n    <Anweisung2>;\n    break;\n  // highlight-green-end\n  // highlight-blue-start\n  default:\n    <StarndardAnweisung>;\n  // highlight-blue-end\n}\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Wertevergleich immer mit ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"=="),", ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"equals")),(0,a.kt)("p",{parentName:"admonition"},"Der ",(0,a.kt)("inlineCode",{parentName:"p"},"Wert")," wird bei einer ",(0,a.kt)("inlineCode",{parentName:"p"},"switch-case"),"-Kontrollstruktur pro ",(0,a.kt)("inlineCode",{parentName:"p"},"case")," mit dem\nVergleichsWert verglichen. Dabei gilt immer ",(0,a.kt)("inlineCode",{parentName:"p"},"==")," rsp. f\xfcr h\xf6here Datentypen\n",(0,a.kt)("inlineCode",{parentName:"p"},"equals"))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"break")),(0,a.kt)("p",{parentName:"admonition"},"Wird eine Anweisung eines ",(0,a.kt)("inlineCode",{parentName:"p"},"case")," nicht mit ",(0,a.kt)("inlineCode",{parentName:"p"},"brake")," beendet, wird ebenfalls die\nAnweisung des n\xe4chsten ",(0,a.kt)("inlineCode",{parentName:"p"},"case")," ausgef\xfchrt. Solange bis ein ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," erscheint.\nDies gilt auch f\xfcr die Standard Anweisung (",(0,a.kt)("inlineCode",{parentName:"p"},"default"),")!"))),(0,a.kt)("div",null,(0,a.kt)("mermaid",{value:'flowchart TB\n    A["switch(wert)"]\n    A --\x3e B\n\n    B{"case wert ==\\n vergleichsWert1"}\n    C{"case wert ==\\n vergleichsWert2"}\n\n    E["Anweisung1;"]\n    F["Anweisung2;\\n <b>break;</b>"]\n    D["StandardAnweisung;"]\n\n    E --\x3e |"ohne `break` wird auch\\nAnweisung2 ausgef\xfchrt"| F\n    B --\x3e |"false"| C\n    B --\x3e |"true"| E\n    C --\x3e |"true"| F\n    C --\x3e |"false"| D\n\n    style C fill:#00A17020,stroke:#00A17080,stroke-width:2px\n    style F fill:#00A17020,stroke:#00A17080,stroke-width:2px\n    style D fill:#0072B520,stroke:#0072B580,stroke-width:2px'}))),(0,a.kt)("h3",{id:"switch-beispiel"},"Switch-Beispiel"),(0,a.kt)("div",{class:"grid"},(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="switch Beispiel"',title:'"switch','Beispiel"':!0},'int day = 4;\nswitch (day) {\n// highlight-red-next-line\n  case 1:\n    System.out.println("Monday");\n    break;\n// highlight-red-next-line\n  case 2:\n    System.out.println("Tuesday");\n    break;\n// highlight-red-next-line\n  case 3:\n    System.out.println("Wednesday");\n    break;\n// highlight-yellow-start\n  case 4:\n    System.out.println("Thursday");\n    break;\n// highlight-yellow-end\n  case 5:\n    System.out.println("Friday");\n    break;\n  case 6:\n    System.out.println("Saturday");\n    break;\n  case 7:\n    System.out.println("Sunday");\n    break;\n}\n// Outputs "Thursday" (day 4)\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"break")," wird eigentlich immer verwendet"),(0,a.kt)("p",{parentName:"admonition"},"Es gibt fast keine realen Szenarien, in denen es Sinn macht mehrere cases\nauszuf\xfchren. Deswegen sind ",(0,a.kt)("inlineCode",{parentName:"p"},"switch-case")," statements nicht all zu oft\nanzutreffen."),(0,a.kt)("p",{parentName:"admonition"},"Eine ",(0,a.kt)("inlineCode",{parentName:"p"},"switch-case"),"-Kontrollstruktur die f\xfcr jede Anweisung ein ",(0,a.kt)("inlineCode",{parentName:"p"},"break"),"\nverwendet, kann immer mit einer ",(0,a.kt)("inlineCode",{parentName:"p"},"if-else"),"-Kontrollstruktur mit ",(0,a.kt)("inlineCode",{parentName:"p"},"==")," Bedingungen\nersetzt werden. Damit lassen sich die breaks sparen."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="switch-case als if-else"',title:'"switch-case',als:!0,'if-else"':!0},"if (wert == 1) {\n  <Anweisung1>\n} else if (wert == 2) {\n  <Anweisung2>\n} else {\n  <StandardAnweisung>\n}\n"))),(0,a.kt)("admonition",{title:"Arrays sind toll!",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"\ud83e\uddb8 Mit einem ",(0,a.kt)("em",{parentName:"p"},"Array")," kann teilweise sogar eine Kontrollstruktur\nvermieden werden."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'String[] days = {"Monday", "Tuesday",\n    "Wednesday", "Thursday", "Friday",\n    "Saturday", "Sunday"};\nint day = 4;\nSystem.out.println(days[day-1]); // Arrays starten bei 0! deswegen day-1\n// Outputs "Thursday"\n')))),(0,a.kt)("div",null,(0,a.kt)("mermaid",{value:'flowchart TB\n    X["day = 4;"]\n    X--\x3eA\n    A["switch(day)"]\n    A --\x3e B1\n\n    B1{"case wert == 1"}\n    B2{"case wert == 2"}\n    B3{"case wert == 3"}\n    B4{"case wert == 4"}\n    B5{"case wert == 5"}\n    B6{"case wert == 6"}\n    B7{"case wert == 7"}\n\n    A1["Monday"]\n    A2["Tuesday"]\n    A3["Wednesday"]\n    A4["Thursday"]\n    A5["Friday"]\n    A6["Saturday"]\n    A7["Sunday"]\n\n    B1 --\x3e |"true"| A1\n    B1 --\x3e |"false"| B2\n    B2 --\x3e |"true"| A2\n    B2 --\x3e |"false"| B3\n    B3 --\x3e |"true"| A3\n    B3 --\x3e |"false"| B4\n    B4 --\x3e |"true"| A4\n    B4 --\x3e |"false"| B5\n    B5 --\x3e |"true"| A5\n    B5 --\x3e |"false"| B6\n    B6 --\x3e |"true"| A6\n    B6 --\x3e |"false"| B7\n    B7 --\x3e |"true"| A7\n\n    style B1 fill:#FF000020,stroke:#FF000060,stroke-width:2px\n    style B2 fill:#FF000020,stroke:#FF000060,stroke-width:2px\n    style B3 fill:#FF000020,stroke:#FF000060,stroke-width:2px\n    style B4 fill:#FFFF0020,stroke:#aaaa0060,stroke-width:2px\n    style A4 fill:#FFFF0020,stroke:#aaaa0060,stroke-width:2px'}))),(0,a.kt)("h2",{id:"methoden"},"Methoden"))}u.isMDXComponent=!0}}]);