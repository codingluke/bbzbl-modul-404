"use strict";(self.webpackChunkbbzbl_modul_404=self.webpackChunkbbzbl_modul_404||[]).push([[9915],{4063:function(e,n,i){i.r(n),i.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return o},frontMatter:function(){return t},metadata:function(){return d},toc:function(){return a}});var r=i(5893),s=i(1151);const t={},l="Basics",d={id:"repetition/basics",title:"Basics",description:"Hier werden nochmals in k\xfcrze alle Konzepte vom Modul 319 aufgef\xfchrt",source:"@site/docs/repetition/basics.md",sourceDirName:"repetition",slug:"/repetition/basics",permalink:"/bbzbl-modul-404/docs/repetition/basics",draft:!1,unlisted:!1,editUrl:"https://github.com/codingluke/bbzbl-modul-404/tree/main/docs/repetition/basics.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Arrays",permalink:"/bbzbl-modul-404/docs/repetition/arrays"},next:{title:"Aufgaben Grundlagen",permalink:"/bbzbl-modul-404/docs/category/aufgaben-grundlagen"}},c={},a=[{value:"Variablen",id:"variablen",level:2},{value:"<em>Primitive</em> Datentypen",id:"primitive-datentypen",level:3},{value:"Initialisierung",id:"initialisierung",level:3},{value:"Der Datentyp <code>String</code>",id:"der-datentyp-string",level:3},{value:"Strings initialisieren",id:"strings-initialisieren",level:3},{value:"Strings zusammensetzen",id:"strings-zusammensetzen",level:3},{value:"Strings mit Zahlen zusammensetzen",id:"strings-mit-zahlen-zusammensetzen",level:3},{value:"Operatoren",id:"operatoren",level:2},{value:"Arithmetische <code>+</code>, <code>-</code>, <code>/</code>, <code>*</code>, <code>%</code>",id:"arithmetische------",level:3},{value:"Verk\xfcrzte arithmetische Operation mit sich selbst <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>",id:"verk\xfcrzte-arithmetische-operation-mit-sich-selbst-----",level:3},{value:"Un\xe4re (einstellige) Operatoren <code>++</code>, <code>--</code>",id:"un\xe4re-einstellige-operatoren----",level:3},{value:"Vergleichsoperatoren <code>==</code>, <code>!=</code>, <code>!</code>",id:"vergleichsoperatoren---",level:3},{value:"Vergleichen von Strings <code>equals</code>",id:"vergleichen-von-strings-equals",level:3},{value:"Wieso ist dies nun so?",id:"wieso-ist-dies-nun-so",level:4},{value:"Und wieso darf man nun primitiven Datentypen mit == vergleichen?",id:"und-wieso-darf-man-nun-primitiven-datentypen-mit--vergleichen",level:4},{value:"Kontrollstrukturen",id:"kontrollstrukturen",level:2},{value:"if-Kontrollstrucktur",id:"if-kontrollstrucktur",level:3},{value:"if-Beispiel",id:"if-beispiel",level:3},{value:"switch",id:"switch",level:3},{value:"Switch-Beispiel",id:"switch-beispiel",level:3},{value:"Methoden",id:"methoden",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"basics",children:"Basics"}),"\n",(0,r.jsx)(n.p,{children:"Hier werden nochmals in k\xfcrze alle Konzepte vom Modul 319 aufgef\xfchrt"}),"\n",(0,r.jsx)(n.h2,{id:"variablen",children:"Variablen"}),"\n",(0,r.jsx)(n.p,{children:"Variablen sind Platzhalter um Werte zu Speichern."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Jede Variable reserviert einen Speicherplatz im Computerspeicher"}),"\n",(0,r.jsx)(n.li,{children:"Durch den eindeutigen Namen kann auf diesen Speicherplatz zugegriffen werden"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Um eine Variable zu definieren muss ein ",(0,r.jsx)(n.strong,{children:"Type"}),", einen ",(0,r.jsx)(n.strong,{children:"Namen"})," und einen\n",(0,r.jsx)(n.strong,{children:"Wert"})," angegeben werden."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Variable syntax"',children:"type variableName = value;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"primitive-datentypen",children:[(0,r.jsx)(n.em,{children:"Primitive"})," Datentypen"]}),"\n",(0,r.jsxs)(n.p,{children:["In Java gibt es eine beachtliche Anzahl an Datentypen gem\xe4ss folgender Tabelle.\nVorerst nutzen wir die ",(0,r.jsx)(n.em,{children:"primitiven"})," Datentypen. Diese sind erkennbar, indem der\n",(0,r.jsx)(n.strong,{children:"Datentyp kleingeschrieben"})," ist."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Datentyp"}),(0,r.jsx)(n.th,{children:"Gr\xf6sse"}),(0,r.jsx)(n.th,{children:"Beschreibung"}),(0,r.jsx)(n.th,{children:"Spezifika"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"1 bit"}),(0,r.jsxs)(n.td,{children:["Speichert ",(0,r.jsx)(n.code,{children:"true"})," ",(0,r.jsx)(n.em,{children:"(wahr)"})," oder ",(0,r.jsx)(n.code,{children:"false"})," ",(0,r.jsx)(n.em,{children:"(falsch)"})," Werte"]}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"byte"}),(0,r.jsx)(n.td,{children:"1 byte"}),(0,r.jsxs)(n.td,{children:["Speichert ganze Zahlen von ",(0,r.jsx)(n.code,{children:"-128"})," bis ",(0,r.jsx)(n.code,{children:"127"})]}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"short"}),(0,r.jsx)(n.td,{children:"2 bytes"}),(0,r.jsxs)(n.td,{children:["Speichert ganze Zahlen von ",(0,r.jsx)(n.code,{children:"-32'768"})," bis ",(0,r.jsx)(n.code,{children:"32'767"})]}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"char"}),(0,r.jsx)(n.td,{children:"2 bytes"}),(0,r.jsxs)(n.td,{children:["Speichert ein einzelnes Zeichen oder ",(0,r.jsx)(n.a,{href:"https://de.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange",children:"ASCII"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"''"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"int"}),(0,r.jsx)(n.td,{children:"4 bytes"}),(0,r.jsxs)(n.td,{children:["Speichert ganze Zahlen ",(0,r.jsx)(n.code,{children:"-2'147'483'648"})," bis ",(0,r.jsx)(n.code,{children:"2'147'483'647"})]}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"4 bytes"}),(0,r.jsxs)(n.td,{children:["Speichert Gleitkommazahlen von ",(0,r.jsx)(n.code,{children:"6"})," bis ",(0,r.jsx)(n.code,{children:"7"})," Dezimalstellen"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"f"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"long"}),(0,r.jsx)(n.td,{children:"8 bytes"}),(0,r.jsxs)(n.td,{children:["Speichert ganze Zahlen von ",(0,r.jsx)(n.code,{children:"-9'223'372'036'854'775'808l"})," bis ",(0,r.jsx)(n.code,{children:"9'223'372'036'854'775'807l"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"l"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"8 bytes"}),(0,r.jsxs)(n.td,{children:["Speichert Gleitkommazahlen von ",(0,r.jsx)(n.code,{children:"15"})," Dezimalstellen"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"d"})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"initialisierung",children:"Initialisierung"}),"\n",(0,r.jsx)(n.p,{children:"Beispiele, wie Variablen initialisiert werden k\xf6nnen. Die Leerzeichen dienen nur\nder \xdcbersichtlichkeit."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Deklarierung von Variablen"',children:"// Datentyp     Variablenname  Semikolon\n   int          number         ;\n   char         sign           ;\n   ...\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Die Initialisierung der Werte verwendet spezifische Zeichen f\xfcr die\nverscheidenen Datentypen. So endet ein ",(0,r.jsx)(n.code,{children:"float"}),"-Wert immer mit ",(0,r.jsx)(n.code,{children:"f"})," oder ",(0,r.jsx)(n.code,{children:"long"}),"\nmit ",(0,r.jsx)(n.code,{children:"l"}),'. Die Spezifikas pro Datentyp finden Sie in der Tabelle oberhalb unter\n"Spezifika".']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Deklarierung & Initialisierung von Variablen"',children:"\n// Datentyp     Variablenname  Zuweiseoperator   Wert  Semikolon\n   int          number         =                 5     ;\n   char         sign           =                 'c'   ;\n   //                                            ^ ^  spezifisch f\xfcr char sind ('')\n   long         longNumber     =                 123l  ;\n   //                                               ^ spezifisch f\xfcr long (l)\n   ...\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"der-datentyp-string",children:["Der Datentyp ",(0,r.jsx)(n.code,{children:"String"})]}),"\n",(0,r.jsxs)(n.p,{children:["Der Datentyp ",(0,r.jsx)(n.code,{children:"String"})," ",(0,r.jsx)(n.strong,{children:"dient zur Speicherung von Zeichenfolgen"}),", also\nallgemeiner Text. Der Text muss immer zwischen zwei ",(0,r.jsx)(n.strong,{children:'"doppelten\nAnf\xfchrungszeichen"'})," gestellt werden."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Datentyp"}),(0,r.jsx)(n.th,{children:"Gr\xf6sse"}),(0,r.jsx)(n.th,{children:"Beschreibung"}),(0,r.jsx)(n.th,{children:"Spezifika"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"2 byte pro Zeichen"}),(0,r.jsx)(n.td,{children:"Speichert beliebigen Text"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'""'})})]})})]}),"\n",(0,r.jsx)(n.h3,{id:"strings-initialisieren",children:"Strings initialisieren"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Datentyp     Variablenname  Zuweiseoperator   Wert   Semikolon\n   String       zeichenFolge   =                 "abc"  ;\n//                                               ^   ^\n//                                   "doppelten Anf\xfchrungszeichen"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"strings-zusammensetzen",children:"Strings zusammensetzen"}),"\n",(0,r.jsxs)(n.p,{children:["Mehrere Variablen vom Datentyp ",(0,r.jsx)(n.code,{children:"String"})," k\xf6nnen durch ein Plus-Zeichen ",(0,r.jsx)(n.code,{children:"+"}),"\nzusammengesetzt werden. Dabei sollte man darauf achten, dass der erste Text mit\neinem Leerzeichen enden soll. Wieso, sieht ihr im Beispiel:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Mit + Strings zusammensetzen"',children:'String name = "Mr Robot";\nSystem.out.println("Your name is " + name);\n//                              ^ Leerzeichen!\n//                  Your name is Mr Robot\n\nSystem.out.println("Your name is" + name);\n//                  Your name isMr Robot\n'})}),"\n",(0,r.jsx)(n.admonition,{title:"H\xf6here Datentypen sind Grossgeschrieben",type:"note",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"String"})," ist Gross geschrieben, da es sich um einen ",(0,r.jsx)(n.em,{children:"h\xf6heren"})," Datentyp\nhandelt."]}),"\n",(0,r.jsxs)(n.li,{children:["Ein ",(0,r.jsx)(n.code,{children:"String"})," baut auf dem ",(0,r.jsx)(n.em,{children:"primitiven"})," Datentyp ",(0,r.jsx)(n.code,{children:"char"})," auf ",(0,r.jsxs)(n.em,{children:["(","\ud83d\udca1"," daher\nh\xf6her)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Evt. Hilft die Analogie von "Atome (primitiv)" zu "Molek\xfcle (h\xf6her)".'}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"H\xf6here"})," Datentypen sind auch Objekte.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Was Objekte genau sind, erfahrt ihr im Folgemodul 404 und ist noch nicht\nrelevant!"}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,r.jsx)(n.h3,{id:"strings-mit-zahlen-zusammensetzen",children:"Strings mit Zahlen zusammensetzen"}),"\n",(0,r.jsxs)(n.p,{children:["Strings k\xf6nnen auch mit allen ",(0,r.jsx)(n.em,{children:"primitiven"})," Datentypen, also auch mit numerischen\nWerten, durch das Plus-Zeichen ",(0,r.jsx)(n.code,{children:"+"})," zu einer Zeichenfolge kombiniert werden. Der\n",(0,r.jsx)(n.em,{children:"primitive"})," Datentyp wird dadurch automatisch zu einem String!"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="String mit Zahlen kombinieren"',children:'System.out.println("Ihre Geschwindigkeit lautet " + 21);\n//                  Ihre Geschwindigkeit lautet 21\n'})}),"\n",(0,r.jsxs)(n.admonition,{title:"Eine Zahl in einen String umwandeln",type:"tip",children:[(0,r.jsxs)(n.p,{children:["Werden Zahlen mit einem ",(0,r.jsx)(n.strong,{children:'leeren String ""'}),' konkatiniert, wird die Zahl alleine\nin einen String umgewandelt. Dies ist ein g\xe4ngiger Java "Hack".']}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Zahl in String umwandeln"',children:'String zahl = "" + 21;\n// zahl ist nun "21"\n'})})]}),"\n",(0,r.jsx)(n.h2,{id:"operatoren",children:"Operatoren"}),"\n",(0,r.jsxs)(n.h3,{id:"arithmetische------",children:["Arithmetische ",(0,r.jsx)(n.code,{children:"+"}),", ",(0,r.jsx)(n.code,{children:"-"}),", ",(0,r.jsx)(n.code,{children:"/"}),", ",(0,r.jsx)(n.code,{children:"*"}),", ",(0,r.jsx)(n.code,{children:"%"})]}),"\n",(0,r.jsxs)(n.p,{children:["Arithmetische Operatoren kennt Ihr bereits von der Mathematik. Damit lassen sich\ndie g\xe4ngigen Mathematischen Operationen durchf\xfchren. Neu ist einzig der Rest\nOperator ",(0,r.jsx)(n.code,{children:"%"}),". Dieser dividiert eine Zahl und gibt den Rest zur\xfcck."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="+ - / * % Arithmetische Operatoren"',children:"int result;\nint number = 9;\nint anotherNumber = 3;\n\nresult = number + anotherNumber; // Addition\nresult = number - anotherNumber; // Subtraktion\nresult = number / anotherNumber; // Division\nresult = number * anotherNumber; // Multiplikation\nresult = number % anotherNumber; // Rest der Division\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsxs)(n.mdxAdmonitionTitle,{children:["Gerade/Ungerade berechnen mit ",(0,r.jsx)(n.code,{children:"%"})]}),(0,r.jsxs)(n.p,{children:["Der Rest-Operator ",(0,r.jsx)(n.code,{children:"%"})," gibt bei einer division immer den Rest zur\xfcck. Wenn man\nnun eine Division durch 2 durchf\xfchrt l\xe4sst sich herausfinden ob eine Zahl gerade\noder ungerade ist."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"9 % 2  // ergibt 4 * 2 Rest 1 also ungerade\n10 % 2 // ergibt 5 * 2 Rest 0 also gerade\n\npublic boolean even(int number) {\n    return number % 2 == 0;\n}\n"})})]}),"\n",(0,r.jsxs)(n.h3,{id:"verk\xfcrzte-arithmetische-operation-mit-sich-selbst-----",children:["Verk\xfcrzte arithmetische Operation mit sich selbst ",(0,r.jsx)(n.code,{children:"+="}),", ",(0,r.jsx)(n.code,{children:"-="}),", ",(0,r.jsx)(n.code,{children:"*="}),", ",(0,r.jsx)(n.code,{children:"/="})]}),"\n",(0,r.jsxs)(n.p,{children:["Oft m\xf6chte man den Wert einer Variablen direkt ver\xe4ndern. Das Resultat also\nnicht in eine neue Variable, sonder in sich selber speichern. Gegeben ist z.B.\ndie Variable ",(0,r.jsx)(n.code,{children:"number"})," vom Typ ",(0,r.jsx)(n.code,{children:"int"})," mit dem Initialwert ",(0,r.jsx)(n.code,{children:"3"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"int number = 3;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["M\xf6chte man dieser Variable ",(0,r.jsx)(n.code,{children:"4"})," hinzuaddieren geht das folgendermassen:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"number = number + 4; // Addition und Zuweisung zu sich selbst\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Da dies sehr oft vorkommt ist in allen g\xe4ngigen Programmiersprachen daf\xfcr ein\nkombinierten Operator vorgesehen. Es wird dem Zuweisungsoperator den\narithmetische Operator ",(0,r.jsx)(n.strong,{children:"vorangestellt"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"number += 4; // Verk\xfcrzte Addition und Zuweisung zu sich selbst\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Aus ",(0,r.jsx)(n.code,{children:"number = number + 4;"})," wird somit ",(0,r.jsx)(n.code,{children:"number += 4;"})," und erspart uns die\nDopplung der Variable. Dies geht nat\xfcrlich auch f\xfcr alle anderen arithmetischen\nOperatoren."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"number -= 7; // Subtraktion und Zuweisung zu sich selbst\nnumber *= 9; // Multiplikation und Zuweisung zu sich selbst\nnumber /= 2; // Division und Zuweisung zu sich selbst\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"un\xe4re-einstellige-operatoren----",children:["Un\xe4re (einstellige) Operatoren ",(0,r.jsx)(n.code,{children:"++"}),", ",(0,r.jsx)(n.code,{children:"--"})]}),"\n",(0,r.jsxs)(n.p,{children:["Noch h\xe4ufiger als die verk\xfcrzte arithmetische Operation mit sich selbst wird im\nProgrammieren schrittweise hoch und runtergez\xe4hlt ",(0,r.jsx)(n.strong,{children:"was auch Iteration genannt\nwird"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"M\xf6chte man also von 0 - 3 hochz\xe4hlen geht dies so:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"int number = 0;\nnumber += 1;\nnumber += 1;\nnumber += 1;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Der Un\xe4re Operator ",(0,r.jsx)(n.code,{children:"++"})," z\xe4hlt der links vorangestellten Variable eines\nnummerischen Typ eine 1 hinzu. Der obere Code ist somit identisch zu diesem:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"int number = 0;\nnumber++;\nnumber++;\nnumber++;\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Un\xe4r => einstellig",type:"info",children:(0,r.jsxs)(n.p,{children:["Un\xe4r bedeutet einstellig, es braucht daher ",(0,r.jsx)(n.strong,{children:"nur der linke"})," und nicht auch\neinen rechten Teil beim Operator."]})}),"\n",(0,r.jsxs)(n.admonition,{title:"Iterieren durch Arrays",type:"tip",children:[(0,r.jsxs)(n.p,{children:["Der un\xe4re Operator ",(0,r.jsx)(n.code,{children:"++"})," wird insbesondere beim ",(0,r.jsx)(n.strong,{children:"Iterieren durch Arrays"})," wie im\nfolgenden Beispiel verwendet. Was gibt der obere Code wohl aus?"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"char[] text = {'h','a','l','l','o',' ','w','e','l','t'};\n\n// highlight-next-line\nfor (int i = 0; i < text.length; i++) {\n    System.out.print(text[i]);\n}\n"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Es wird Schrittweise jede Stelle vom Array ",(0,r.jsx)(n.code,{children:"char[] text"})," in einem ",(0,r.jsx)(n.code,{children:"for"}),"-Loop\nausgegeben"]}),"\n",(0,r.jsxs)(n.li,{children:["Die Variable ",(0,r.jsx)(n.code,{children:"i"}),", Iterator, wird durch ",(0,r.jsx)(n.code,{children:"i++"})," f\xfcr jeden Schritt +1 hochgez\xe4hlt"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"i++"})," k\xf6nnte auch mit ",(0,r.jsx)(n.code,{children:"i += 1"})," oder ",(0,r.jsx)(n.code,{children:"i = i + 1"})," ersetzt werden."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"i++"})," ist jedoch viel k\xfcrzer."]}),"\n"]})]}),"\n",(0,r.jsx)(n.admonition,{title:"Funfact",type:"note",children:(0,r.jsx)(n.p,{children:"C++ erweitert die Programmiersprache C. Um diese Verwandtschaft ein bisschen\nNERDisch Auszudr\xfccken wurde das Wortspiel C++ gew\xe4hlt. C++ ist eine weitere\nIteration von C."})}),"\n",(0,r.jsxs)(n.h3,{id:"vergleichsoperatoren---",children:["Vergleichsoperatoren ",(0,r.jsx)(n.code,{children:"=="}),", ",(0,r.jsx)(n.code,{children:"!="}),", ",(0,r.jsx)(n.code,{children:"!"})]}),"\n",(0,r.jsxs)(n.p,{children:["Vergleichsoperatoren ergeben immer einen ",(0,r.jsx)(n.strong,{children:"boolean (true/false)"}),". Sie werden in\nKontrollstrukturen als Bedingungen verwendet."]}),"\n",(0,r.jsxs)("div",{className:"grid three",children:[(0,r.jsx)("div",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="== Gleichheit"',children:"true  == true; // true\n1     == 1     // true\n\nfalse == true; // false\n1     == 2     // false\n"})})}),(0,r.jsx)("div",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="!= Ungleichheit"',children:"false != true; // true\n1     != 2     // true\n\ntrue  != true; // false\n1     != 1     // false\n"})})}),(0,r.jsx)("div",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="! Negation"',children:"!false // true\n!(1 == 2) // true\n\n!true // false\n!(1 == 1) // false\n"})})})]}),"\n",(0,r.jsxs)(n.h3,{id:"vergleichen-von-strings-equals",children:["Vergleichen von Strings ",(0,r.jsx)(n.code,{children:"equals"})]}),"\n",(0,r.jsxs)(n.p,{children:["Strings und andere h\xf6here Datentypen, k\xf6nnen ",(0,r.jsx)(n.strong,{children:"nicht durch Vergleichsoperatoren\nverglichen werden"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["H\xf6here Datentypen sind Datentypen die durch ",(0,r.jsx)(n.strong,{children:"Klassen"})," definiert werden"]}),"\n",(0,r.jsxs)(n.li,{children:["Diese sind ",(0,r.jsx)(n.strong,{children:"immer gross geschrieben"})]}),"\n",(0,r.jsxs)(n.li,{children:["H\xf6here Datentypen besitzen die ",(0,r.jsxs)(n.strong,{children:["Methode ",(0,r.jsx)(n.code,{children:"equals"})]}),' (was auf Deutsch "gleicht"\nheisst)']}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'String text = new String("Hallo Welt");\nString text2 = new String("Hallo Welt");\n\ntext == text2;     // false! Die Speicherorte der Objekte `text` und `text2` sind unterschiedlich\ntext.equals(text2) // true!  Der Inhalt von beiden Objekte ist jedoch gleich.\n'})}),"\n",(0,r.jsx)(n.h4,{id:"wieso-ist-dies-nun-so",children:"Wieso ist dies nun so?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Technisch:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Durch ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:'String text = new String("Hallo Welt");'})})," wird ein ",(0,r.jsx)(n.strong,{children:"Objekt"}),"\nerzeugt. Dieses besitzt einen ",(0,r.jsx)(n.strong,{children:"eigenen Speicherbereich"})," in der Variable\n",(0,r.jsx)(n.code,{children:"text"})]}),"\n",(0,r.jsxs)(n.li,{children:["Durch ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:'String text2 = new String("Hallo Welt");'})})," wird ebenfalls ein\n",(0,r.jsx)(n.strong,{children:"neues Objekt"})," erzeugt. Dieses besitzt wiederum einen ",(0,r.jsx)(n.strong,{children:"eigenen\nSpeicherbereich"})," in der Variable ",(0,r.jsx)(n.code,{children:"text2"})]}),"\n",(0,r.jsxs)(n.li,{children:["Werden nun die zwei Objekte durch ",(0,r.jsx)(n.code,{children:"=="})," verglichen, wird nicht deren Inhalt,\nsondern deren ",(0,r.jsx)(n.strong,{children:"Speicherort verglichen"}),"!"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Mit ",(0,r.jsx)(n.code,{children:"equals"})," wird nun aber der Inhalt verglichen."]})," Zwei Pakete mit dem\ngleichen Inhalt sind zwar eigenst\xe4ndig, aber sie sind sich gleich."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Verst\xe4ndlich:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Stellen wir uns ",(0,r.jsx)(n.strong,{children:"ein Paket"}),", Paket1, vor, in welches die Druckletter\nH,a,l,l,o, ,W,e,l und t gelegt werden"]}),"\n",(0,r.jsxs)(n.li,{children:["Stellen wir uns ",(0,r.jsx)(n.strong,{children:"ein zweites Paket"}),", Paket2, vor, in welches ebenfalls die\nDruckletter H,a,l,l,o, ,W,e,l und t gelegt werden"]}),"\n",(0,r.jsxs)(n.li,{children:["Zwei Pakete mit gleichem Inhalt sind auch in der uns bekannten Welt immer\nnoch zwei unterschiedliche Pakete, oder?","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Mit ",(0,r.jsx)(n.code,{children:"=="})," werden die Pakete"]}),' und nicht deren Inhalt "Hallo Welt"\nverglichen.']}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Vergleicht man jedoch der Inhalt befinden sich in beiden Paketen die gleichen\nDruckletter in der gleichen Reihenfolge.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Mit ",(0,r.jsx)(n.code,{children:"equals"})," wird der Inhalt"]})," und nicht die Pakete verglichen."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"und-wieso-darf-man-nun-primitiven-datentypen-mit--vergleichen",children:"Und wieso darf man nun primitiven Datentypen mit == vergleichen?"}),"\n",(0,r.jsxs)(n.p,{children:["Primitive Datentypen sind in Java ",(0,r.jsx)(n.strong,{children:"keine Objekte"}),", sie werden somit nicht in\nein Paket verpackt."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Die Nummer ",(0,r.jsx)(n.code,{children:"4"})," ist die Nummer ",(0,r.jsx)(n.code,{children:"4"}),". Punkt."]}),"\n",(0,r.jsxs)(n.li,{children:["Das Zeichen ",(0,r.jsx)(n.code,{children:"c"})," ist das Zeichen ",(0,r.jsx)(n.code,{children:"c"}),". Punkt."]}),"\n",(0,r.jsxs)(n.li,{children:['Aber der Satz "Hallo Welt" k\xf6nnte man',"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"alphabetisch sortieren"}),"\n",(0,r.jsx)(n.li,{children:"gross schreiben"}),"\n",(0,r.jsx)(n.li,{children:"klein schreiben"}),"\n",(0,r.jsx)(n.li,{children:"..."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{title:"String ist eine Klasse und somit ein Objekt",type:"info",children:[(0,r.jsxs)(n.p,{children:["Eigentlich m\xfcsste man einen ",(0,r.jsx)(n.code,{children:"String"})," wie folgt initialisieren:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'String text = new String("String ist eine Klasse und kann somit auch mit new initialisiert werden");\n'})}),(0,r.jsxs)(n.p,{children:["Da jedoch so oft Strings verwendet werden und die Klasse somit fest in die\nSprache verankert ist, ",(0,r.jsx)(n.strong,{children:"wurde Ihr durch den Compiler ein paar Sonderheiten\nverliehen"}),". So kann das ",(0,r.jsx)(n.code,{children:"new String()"})," weggelassen werden."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'String text = "String ist eine Klasse und kann somit auch mit new initialisiert werden";\n'})}),(0,r.jsxs)(n.p,{children:["Beim kompilieren wird das ",(0,r.jsx)(n.code,{children:"new String()"})," automatisch hinzugef\xfcgt!"]})]}),"\n",(0,r.jsxs)(n.admonition,{title:"Compiler sind schlau!",type:"info",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"Hallo Welt" == "Hallo Welt";'})," ist ",(0,r.jsx)(n.code,{children:"true"}),". Dies ist eine Ausnahme, da der\nCompiler schlau ist und merkt, dass hier nicht zwei Objekte ben\xf6tigt werden. Der\nCompiler versucht Speicher zu sparen. Sobald aber zwei Strings dynamisch\nerstellt werden (",(0,r.jsx)(n.code,{children:"new"}),") geht dies nicht mehr!"]}),(0,r.jsx)(n.p,{children:"Nach dem compilieren sieht das in etwa wo aus:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'String text = new String("Hallo Welt");\ntext == text; // true da gleiches Objekt und Speicherort!\n'})})]}),"\n",(0,r.jsxs)(n.admonition,{title:"Nicht alle Programmiersprachen sind gleich",type:"note",children:[(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.a,{href:"https://www.ruby-lang.org",children:"Ruby"})," ist z.B. alles ein Objekt. Auch Zahlen. Da\ngehen lustige Dinge wie:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://guides.rubyonrails.org/active_support_core_extensions.html#extensions-to-integer-time",children:(0,r.jsx)(n.code,{children:"print 3.month.from_now"})}),"\ngibt das Datum von in drei Monaten zur\xfcck"]}),"\n",(0,r.jsxs)(n.li,{children:["oder\n",(0,r.jsx)(n.a,{href:"https://apidock.com/ruby/Integer/times",children:(0,r.jsx)(n.code,{children:'3.times { print "Hallo Welt" }'})}),'\ngibt 3 Mal "Hallo Welt" aus']}),"\n"]})]}),"\n",(0,r.jsx)(n.h2,{id:"kontrollstrukturen",children:"Kontrollstrukturen"}),"\n",(0,r.jsx)(n.h3,{id:"if-kontrollstrucktur",children:"if-Kontrollstrucktur"}),"\n",(0,r.jsxs)("div",{class:"grid",children:[(0,r.jsx)("div",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Pseudo-Code"',children:"// highlight-start\nif (<Bedingung1>) {\n  // Codeblock bei wahrer bedingung1\n  <Anweisung1>\n}\n// highlight-end\n// highlight-green-start\nelse if (<Bedingung2>) {\n  // Codeblock bei\n  //   - unwahrer bedingung1\n  //   - aber wahrer bedingung2\n  <Anweisung2>\n}\n// highlight-green-end\n// highlight-blue-start\nelse {\n  // Codeblock bei\n  //   - unwahrer bedingung1\n  //   - unwahrer bedingung2\n  <Anweisung3>\n}\n// highlight-blue-end\n"})})}),(0,r.jsx)("div",{children:(0,r.jsx)(n.mermaid,{value:'flowchart TD\n    C{Wertestand}\n    C --\x3e|"if\\n< Bedingung1 >"| D["< Anweisung1 >"]\n    C --\x3e|"else if\\n< Bedingung2 >"| E["< Anweisung2 >"]\n    C --\x3e|else| F["< Anweisung3 >"]\n\n    style E fill:#00A17020,stroke:#00A17080,stroke-width:2px\n    style F fill:#0072B520,stroke:#0072B580,stroke-width:2px'})})]}),"\n",(0,r.jsx)(n.h3,{id:"if-beispiel",children:"if-Beispiel"}),"\n",(0,r.jsxs)("div",{class:"grid",children:[(0,r.jsxs)("div",{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="if Beispiel"',children:'int time = 22;\n// highlight-red-next-line\nif (time < 10) {\n  System.out.println("Good morning.");\n// highlight-red-next-line\n} else if (time < 18) {\n  System.out.println("Good day.");\n} else {\n  // highlight-yellow-next-line\n  System.out.println("Good evening.");\n}\n// Outputs "Good evening." (else).\n'})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Es wird der Code-Block von ",(0,r.jsx)(n.code,{children:"else"})," ausgef\xfchrt, da die Variabe ",(0,r.jsx)(n.code,{children:"time"})," sowohl\ngr\xf6sser als 10 wie auch wie auch gr\xf6sser als 18 ist."]}),"\n"]})]}),(0,r.jsx)("div",{children:(0,r.jsx)(n.mermaid,{value:'flowchart TD\n    C{time = 22}\n    C --\x3e|"if (time < 10)"| D["Good morning."]\n    C --\x3e|"else if (time < 18)"| E["Good day."]\n    C --\x3e|else| F["Good evening"]\n\n    style F fill:#FFFF0020,stroke:#aaaa0060,stroke-width:2px'})})]}),"\n",(0,r.jsx)(n.h3,{id:"switch",children:"switch"}),"\n",(0,r.jsxs)("div",{class:"grid",children:[(0,r.jsxs)("div",{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Pseudo-Code"',children:"switch(wert) {\n  case vergleichsWert1:\n    <Anweisung1>;\n    // ohne `break` wird auch <Anweisung2>\n    // bis zum `break` ausgef\xfchrt.\n  // highlight-green-start\n  case vergleichsWert2:\n    <Anweisung2>;\n    break;\n  // highlight-green-end\n  // highlight-blue-start\n  default:\n    <StarndardAnweisung>;\n  // highlight-blue-end\n}\n"})}),(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.mdxAdmonitionTitle,{children:["Wertevergleich immer mit ",(0,r.jsx)(n.code,{children:"=="}),", ",(0,r.jsx)(n.code,{children:"equals"})]}),(0,r.jsxs)(n.p,{children:["Der ",(0,r.jsx)(n.code,{children:"Wert"})," wird bei einer ",(0,r.jsx)(n.code,{children:"switch-case"}),"-Kontrollstruktur pro ",(0,r.jsx)(n.code,{children:"case"})," mit dem\nVergleichsWert verglichen. Dabei gilt immer ",(0,r.jsx)(n.code,{children:"=="})," rsp. f\xfcr h\xf6here Datentypen\n",(0,r.jsx)(n.code,{children:"equals"})]})]}),(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{children:(0,r.jsx)(n.code,{children:"break"})}),(0,r.jsxs)(n.p,{children:["Wird eine Anweisung eines ",(0,r.jsx)(n.code,{children:"case"})," nicht mit ",(0,r.jsx)(n.code,{children:"brake"})," beendet, wird ebenfalls die\nAnweisung des n\xe4chsten ",(0,r.jsx)(n.code,{children:"case"})," ausgef\xfchrt. Solange bis ein ",(0,r.jsx)(n.code,{children:"break"})," erscheint.\nDies gilt auch f\xfcr die Standard Anweisung (",(0,r.jsx)(n.code,{children:"default"}),")!"]})]})]}),(0,r.jsx)("div",{children:(0,r.jsx)(n.mermaid,{value:'flowchart TB\n    A["switch(wert)"]\n    A --\x3e B\n\n    B{"case wert ==\\n vergleichsWert1"}\n    C{"case wert ==\\n vergleichsWert2"}\n\n    E["Anweisung1;"]\n    F["Anweisung2;\\n <b>break;</b>"]\n    D["StandardAnweisung;"]\n\n    E --\x3e |"ohne `break` wird auch\\nAnweisung2 ausgef\xfchrt"| F\n    B --\x3e |"false"| C\n    B --\x3e |"true"| E\n    C --\x3e |"true"| F\n    C --\x3e |"false"| D\n\n    style C fill:#00A17020,stroke:#00A17080,stroke-width:2px\n    style F fill:#00A17020,stroke:#00A17080,stroke-width:2px\n    style D fill:#0072B520,stroke:#0072B580,stroke-width:2px'})})]}),"\n",(0,r.jsx)(n.h3,{id:"switch-beispiel",children:"Switch-Beispiel"}),"\n",(0,r.jsxs)("div",{class:"grid",children:[(0,r.jsxs)("div",{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="switch Beispiel"',children:'int day = 4;\nswitch (day) {\n// highlight-red-next-line\n  case 1:\n    System.out.println("Monday");\n    break;\n// highlight-red-next-line\n  case 2:\n    System.out.println("Tuesday");\n    break;\n// highlight-red-next-line\n  case 3:\n    System.out.println("Wednesday");\n    break;\n// highlight-yellow-start\n  case 4:\n    System.out.println("Thursday");\n    break;\n// highlight-yellow-end\n  case 5:\n    System.out.println("Friday");\n    break;\n  case 6:\n    System.out.println("Saturday");\n    break;\n  case 7:\n    System.out.println("Sunday");\n    break;\n}\n// Outputs "Thursday" (day 4)\n'})}),(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.mdxAdmonitionTitle,{children:[(0,r.jsx)(n.code,{children:"break"})," wird eigentlich immer verwendet"]}),(0,r.jsxs)(n.p,{children:["Es gibt fast keine realen Szenarien, in denen es Sinn macht mehrere cases\nauszuf\xfchren. Deswegen sind ",(0,r.jsx)(n.code,{children:"switch-case"})," statements nicht all zu oft\nanzutreffen."]}),(0,r.jsxs)(n.p,{children:["Eine ",(0,r.jsx)(n.code,{children:"switch-case"}),"-Kontrollstruktur die f\xfcr jede Anweisung ein ",(0,r.jsx)(n.code,{children:"break"}),"\nverwendet, kann immer mit einer ",(0,r.jsx)(n.code,{children:"if-else"}),"-Kontrollstruktur mit ",(0,r.jsx)(n.code,{children:"=="})," Bedingungen\nersetzt werden. Damit lassen sich die breaks sparen."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="switch-case als if-else"',children:"if (wert == 1) {\n  <Anweisung1>\n} else if (wert == 2) {\n  <Anweisung2>\n} else {\n  <StandardAnweisung>\n}\n"})})]}),(0,r.jsxs)(n.admonition,{title:"Arrays sind toll!",type:"tip",children:[(0,r.jsxs)(n.p,{children:["\ud83e\uddb8\u200d\u2640\ufe0f"," Mit einem ",(0,r.jsx)(n.em,{children:"Array"})," kann teilweise sogar eine Kontrollstruktur\nvermieden werden."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'String[] days = {"Monday", "Tuesday",\n    "Wednesday", "Thursday", "Friday",\n    "Saturday", "Sunday"};\nint day = 4;\nSystem.out.println(days[day-1]); // Arrays starten bei 0! deswegen day-1\n// Outputs "Thursday"\n'})})]})]}),(0,r.jsx)("div",{children:(0,r.jsx)(n.mermaid,{value:'flowchart TB\n    X["day = 4;"]\n    X--\x3eA\n    A["switch(day)"]\n    A --\x3e B1\n\n    B1{"case wert == 1"}\n    B2{"case wert == 2"}\n    B3{"case wert == 3"}\n    B4{"case wert == 4"}\n    B5{"case wert == 5"}\n    B6{"case wert == 6"}\n    B7{"case wert == 7"}\n\n    A1["Monday"]\n    A2["Tuesday"]\n    A3["Wednesday"]\n    A4["Thursday"]\n    A5["Friday"]\n    A6["Saturday"]\n    A7["Sunday"]\n\n    B1 --\x3e |"true"| A1\n    B1 --\x3e |"false"| B2\n    B2 --\x3e |"true"| A2\n    B2 --\x3e |"false"| B3\n    B3 --\x3e |"true"| A3\n    B3 --\x3e |"false"| B4\n    B4 --\x3e |"true"| A4\n    B4 --\x3e |"false"| B5\n    B5 --\x3e |"true"| A5\n    B5 --\x3e |"false"| B6\n    B6 --\x3e |"true"| A6\n    B6 --\x3e |"false"| B7\n    B7 --\x3e |"true"| A7\n\n    style B1 fill:#FF000020,stroke:#FF000060,stroke-width:2px\n    style B2 fill:#FF000020,stroke:#FF000060,stroke-width:2px\n    style B3 fill:#FF000020,stroke:#FF000060,stroke-width:2px\n    style B4 fill:#FFFF0020,stroke:#aaaa0060,stroke-width:2px\n    style A4 fill:#FFFF0020,stroke:#aaaa0060,stroke-width:2px'})})]}),"\n",(0,r.jsx)(n.h2,{id:"methoden",children:"Methoden"})]})}function o(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},1151:function(e,n,i){i.d(n,{Z:function(){return d},a:function(){return l}});var r=i(7294);const s={},t=r.createContext(s);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);