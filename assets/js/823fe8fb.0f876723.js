"use strict";(self.webpackChunkbbzbl_modul_404=self.webpackChunkbbzbl_modul_404||[]).push([[4588],{2230:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>a});var i=t(5893),s=t(1151);const r={},d="ActionListener",o={id:"konzepte/actionlistener",title:"ActionListener",description:"- Dies sollen alle vor dem LB1 verstanden und verinnerlicht haben!",source:"@site/docs/konzepte/actionlistener.md",sourceDirName:"konzepte",slug:"/konzepte/actionlistener",permalink:"/bbzbl-modul-404/docs/konzepte/actionlistener",draft:!1,unlisted:!1,editUrl:"https://github.com/codingluke/bbzbl-modul-404/tree/main/docs/konzepte/actionlistener.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Theorie",permalink:"/bbzbl-modul-404/docs/category/theorie"},next:{title:"Fachklassen",permalink:"/bbzbl-modul-404/docs/konzepte/fachklassen"}},l={},a=[{value:"Das Interface <code>ActionListener</code>",id:"das-interface-actionlistener",level:2},{value:"ActionListener Beispiel: <code>TimeButton</code> Klasse",id:"actionlistener-beispiel-timebutton-klasse",level:2},{value:"Erl\xe4uterung zum Code",id:"erl\xe4uterung-zum-code",level:3},{value:"Feststellen, welcher Button gedr\xfcckt wurde",id:"feststellen-welcher-button-gedr\xfcckt-wurde",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"actionlistener",children:"ActionListener"}),"\n",(0,i.jsx)(n.admonition,{title:"allerwesentlichster Part!",type:"danger",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Dies sollen alle ",(0,i.jsx)(n.strong,{children:"vor dem LB1 verstanden und verinnerlicht haben"}),"!"]}),"\n",(0,i.jsx)(n.li,{children:"Ohne dieses Wissen ist das Projekt und auch die Pr\xfcfung nicht zu bestehen!"}),"\n"]})}),"\n",(0,i.jsxs)(n.h2,{id:"das-interface-actionlistener",children:["Das Interface ",(0,i.jsx)(n.code,{children:"ActionListener"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ActionListener"})," ist ein Interface, welches von Java mitgeliefert wird."]}),"\n",(0,i.jsxs)(n.li,{children:["Es ",(0,i.jsx)(n.strong,{children:"definiert"})," die Methode ",(0,i.jsx)(n.code,{children:"public void actionPerformed(ActionEvent e);"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Alle Klassen, die den ActionListener implementieren\n(",(0,i.jsx)(n.code,{children:"implements ActionListener"}),") ",(0,i.jsx)(n.strong,{children:"m\xfcssen"})," auch die Methode\n",(0,i.jsx)(n.code,{children:"public void actionPerformed(ActionEvent e);"})," implementieren:"]}),"\n",(0,i.jsxs)(n.li,{children:["Die JavaDoc findet man ",(0,i.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/event/ActionListener.html",children:"hier"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="java.awt.event.ActionListener"',children:"package java.awt.event;\n\nimport java.util.EventListener;\n\npublic interface ActionListener extends EventListener {\n\n  public void actionPerformed(ActionEvent e);\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"actionlistener-beispiel-timebutton-klasse",children:["ActionListener Beispiel: ",(0,i.jsx)(n.code,{children:"TimeButton"})," Klasse"]}),"\n",(0,i.jsxs)(n.p,{children:["Das nachfolgende Programm zeigt ein Swing-Programm, das in einfacher Art\ninteraktiv ist. Bei jedem Klick auf den Button wird in einem ",(0,i.jsx)(n.code,{children:"JLabel"})," das\naktuelle Datum mit Uhrzeit angezeigt. (Die Starterklasse ist weggelassen.)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.Date;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\n\n// highlight-start\n\n// `implements ActionListener` wird neu hinzugef\xfcgt.\n// Damit wird die Methode `actionPerformed(ActionEvent e)` der Klasse hinzugef\xfcgt.\npublic class TimeButton extends JFrame implements ActionListener {\n\n  // highlight-end\n  private JButton commandButton = new JButton("show time");\n  private JLabel outputLabel = new JLabel();\n\n  public void showDialog() {\n    setLayout(null);\n\n    outputLabel.setBounds(10, 40, 250, 15);\n    commandButton.setBounds(10, 60, 250, 20);\n    add(outputLabel);\n    add(commandButton);\n    // highlight-start\n\n    // Hier wird die Klasse beim Button `commandButton` registriert\n    // Ohne diese Anweisung macht der `commandButton` nix!\n    commandButton.addActionListener(this);\n\n    // highlight-end\n    setDefaultCloseOperation(EXIT_ON_CLOSE);\n    setSize(300, 300);\n    setTitle("JFrame TimeButton");\n    setVisible(true);\n  }\n\n  // highlight-start\n\n  // Diese Methode wird immer ausgef\xfchrt, wenn der `commandButton` gedr\xfcckt wird\n  @Override // dies signalisiert, dass wir die Methode definieren m\xfcssen!\n  public void actionPerformed(ActionEvent e) {\n    // Wenn der `commandButton` gedr\xfcckt wird, wird ein neues Datum ins `outputLabel` geschrieben\n    outputLabel.setText("" + new Date());\n  }\n\n  // highlight-end\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"erl\xe4uterung-zum-code",children:"Erl\xe4uterung zum Code"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Die Komponenten sind im Klassen-Body initialisiert. Sie sind dadurch\n",(0,i.jsx)(n.strong,{children:"Instanz-Variablen"}),", das heisst sie sind \xfcberall in der Klasse sichtbar und\nnicht nur in dem Codeblock, in welchem sie erzeugt wurden. Statt von Variablen\nspricht man bei Deklarationen an dieser Stelle von Attributen,\nInstanz-Variablen oder Felder."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"implements ActionListener"}),": Dies bewirkt, dass die Klasse in der Lage ist,\nMeldungen zu verarbeiten. ",(0,i.jsx)(n.code,{children:"JButtons"})," k\xf6nnen zum Beispiel solche Meldungen\nverschicken. Unsere Klasse ist nun ",(0,i.jsx)(n.strong,{children:"gezwungen"})," die Methode\n",(0,i.jsx)(n.code,{children:"actionPerformed(ActionEvent e)"})," zu implementieren."]}),"\n",(0,i.jsxs)(n.li,{children:["In ",(0,i.jsx)(n.code,{children:"showDialog()"})," wird die Methode ",(0,i.jsx)(n.code,{children:"commandButton.addActionListener(this);"}),"\naufgerufen. Mit diesem Aufruf kann sich eine Klasse bei einem ",(0,i.jsx)(n.code,{children:"JButton"}),"\n",(0,i.jsx)(n.strong,{children:"registrieren"})," und wird anschliessend immer benachrichtigt, wenn die\nSchaltfl\xe4che bet\xe4tigt wurde. Mit dem Schl\xfcsselwort ",(0,i.jsx)(n.code,{children:"this"})," wird ausgesagt, dass\nsich die Klasse selbst als ",(0,i.jsx)(n.code,{children:"Listener"})," (also Zuh\xf6rer) hinzuf\xfcgt."]}),"\n",(0,i.jsxs)(n.li,{children:["Wird die Schaltfl\xe4che bet\xe4tigt, so benachrichtigt der ",(0,i.jsx)(n.code,{children:"JButton"})," die Klasse,\nindem er die Methode ",(0,i.jsx)(n.code,{children:"actionPerformed(ActionEvent e)"})," aufruft. Der Parameter\nbeim Aufruf ist vom Typ ",(0,i.jsx)(n.code,{children:"ActionEvent"}),". Mit diesem Event kann \xfcber die Methode\n",(0,i.jsx)(n.code,{children:"getSource()"})," herausgefunden werden, welche Komponente den Aufruf ausgel\xf6st\nhat. So kann mittels verschiedenen if-Abfragen entschieden werden, welcher\n",(0,i.jsx)(n.code,{children:"JButton"})," bet\xe4tigt wurde (Unten folgt ein Beispiel dazu.)."]}),"\n",(0,i.jsxs)(n.li,{children:["Zudem zeigt das Beispiel wie Werte in Komponenten mit der Methode\n",(0,i.jsx)(n.code,{children:"setText(String message)"})," gesetzt werden."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"feststellen-welcher-button-gedr\xfcckt-wurde",children:"Feststellen, welcher Button gedr\xfcckt wurde"}),"\n",(0,i.jsxs)(n.p,{children:["Falls ein Fenster mehrere Buttons hat, muss sich die Fensterklasse bei jedem\nButton registrieren, damit sie bei einem Klick benachrichtigt wird. Jedes Mal,\nwenn ein Button gedr\xfcckt wird, erfolgt ein Aufruf der Methode ",(0,i.jsx)(n.code,{children:"actionPerformed"}),".\nIn dieser Methode muss nun herausgefunden werden, wer der Urheber des Aufrufs\nist."]}),"\n",(0,i.jsx)(n.p,{children:"Dies l\xe4sst sich wie folgt feststellen:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="Mehrere Buttons unterscheiden mit e.getSource()"',children:'public class TimeButton extends JFrame implements ActionListener {\n  private JButton commandButton = new JButton("show time");\n  private JButton otherButton = new JButton("do something different");\n\n  // ... nachvolgender Code ausgeblendet ...\n\n  public void showDialog() {\n    // ... vorausgehender Code ausgeblendet ...\n    // highlight-start\n\n    commandButton.addActionListener(this);\n    otherButton.addActionListener(this);\n\n    // highlight-end\n    // ... nachvolgender Code ausgeblendet ...\n  }\n\n  @Override // dies signalisiert, dass wir die Methode definieren m\xfcssen!\n  public void actionPerformed(ActionEvent e) {\n    // highlight-start\n\n    if (e.getSource() == commandButton) { //\n      // wird ausgef\xfchrt, wenn der `commandButton` gedr\xfcckt wurde\n    } else if (e.getSource() == otherButton) {\n      // wird ausgef\xfchrt, wenn der `otherButton` gedr\xfcckt wurde\n    }\n\n    // highlight-end\n  }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>d});var i=t(7294);const s={},r=i.createContext(s);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);