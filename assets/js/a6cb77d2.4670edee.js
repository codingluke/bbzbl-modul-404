"use strict";(self.webpackChunkbbzbl_modul_404=self.webpackChunkbbzbl_modul_404||[]).push([[8946],{3657:function(e,n,i){i.r(n),i.d(n,{assets:function(){return d},contentTitle:function(){return r},default:function(){return o},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return c}});var s=i(5893),t=i(1151);const a={},r="Fachklassen",l={id:"konzepte/fachklassen",title:"Fachklassen",description:'Eine Fachklasse ist eine Klasse, die nur "im Hintergrund" arbeitet und',source:"@site/docs/konzepte/fachklassen.md",sourceDirName:"konzepte",slug:"/konzepte/fachklassen",permalink:"/bbzbl-modul-404/docs/konzepte/fachklassen",draft:!1,unlisted:!1,editUrl:"https://github.com/codingluke/bbzbl-modul-404/tree/main/docs/konzepte/fachklassen.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ActionListener",permalink:"/bbzbl-modul-404/docs/konzepte/actionlistener"},next:{title:"Formatierung",permalink:"/bbzbl-modul-404/docs/konzepte/formatierung"}},d={},c=[{value:"Klassenstruktur",id:"klassenstruktur",level:2},{value:"Instanziierung und Verwendung eines Objekts/Instanz",id:"instanziierung-und-verwendung-eines-objektsinstanz",level:2},{value:"\ud83e\uddb8 Unterschied von einem Objekt und einer Variable",id:"-unterschied-von-einem-objekt-und-einer-variable",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components},{TabItem:i,Tabs:a}=n;return i||u("TabItem",!0),a||u("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"fachklassen",children:"Fachklassen"}),"\n",(0,s.jsxs)(n.p,{children:["Eine ",(0,s.jsx)(n.strong,{children:"Fachklasse"}),' ist eine Klasse, die nur "im Hintergrund" arbeitet und\n',(0,s.jsx)(n.strong,{children:"nicht f\xfcr die Interaktion mit dem Benutzer zust\xe4ndig ist"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"klassenstruktur",children:"Klassenstruktur"}),"\n",(0,s.jsxs)(n.p,{children:["Gem\xe4ss aktuellem Wissensstand folgen Klassen folgendem ",(0,s.jsx)(n.strong,{children:"Schema"}),":"]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsxs)(i,{className:"shadow--tl",value:"apple",label:"Klassen-Deklaration",default:!0,children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// highlight-next-line\npublic class ClassName { // Klassendeklaration Start\n\n  private int myInstanceVariable;                // Instanzvariablen\n\n  public void setMyInstanceVariable(int value) { // Methode (setter)\n    myInstanceVariable = value;\n  }\n\n  public int getMyInstanceVariable() {           // Methode (getter)\n    return myInstanceVariable;\n  }\n\n// highlight-next-line\n} // Klassendeklaration Ende\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Die ",(0,s.jsx)(n.code,{children:"Klassen-Deklaration"})," definiert den ",(0,s.jsx)(n.strong,{children:"Namen"})," der Klasse."]}),"\n",(0,s.jsxs)(n.li,{children:["Der ",(0,s.jsx)(n.strong,{children:"Namen"})," der Klasse definiert automatisch auch einen ",(0,s.jsx)(n.strong,{children:"Datentyp"}),"!"]}),"\n"]})]}),(0,s.jsxs)(i,{className:"shadow--tl",value:"body",label:"Klassen-Body",default:!0,children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class ClassName { // Klassendeklaration Start\n  // highlight-start\n\n  private int myInstanceVariable;                // Instanzvariablen\n\n  public void setMyInstanceVariable(int value) { // Methode (setter)\n    myInstanceVariable = value;\n  }\n\n  public int getMyInstanceVariable() {           // Methode (getter)\n    return myInstanceVariable;\n  }\n\n  // highlight-end\n} // Klassendeklaration Ende\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Der Klassenk\xf6rper beinhaltet die ",(0,s.jsxs)(n.strong,{children:["Deklaration der ",(0,s.jsx)(n.code,{children:"Instanz-Variablen"})," und\n",(0,s.jsx)(n.code,{children:"Instanz-Methoden"})]}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Innerhalb des Body darf ",(0,s.jsx)(n.strong,{children:"kein ausf\xfchrender Code"})," stehen!","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Dieser befindet sich ",(0,s.jsx)(n.strong,{children:"immer"})," innerhalb vom ",(0,s.jsx)(n.code,{children:"Methoden-Body"})]}),"\n"]}),"\n"]}),"\n"]})]}),(0,s.jsxs)(i,{className:"shadow--tl",value:"orange",label:"Instanz-Variablen",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class ClassName { // Klassendeklaration Start\n  // highlight-start\n\n  private int myInstanceVariable;                // Instanzvariablen\n\n  // highlight-end\n  public void setMyInstanceVariable(int value) { // Methode (setter)\n    myInstanceVariable = value;\n  }\n\n  public int getMyInstanceVariable() {           // Methode (getter)\n    return myInstanceVariable;\n  }\n\n} // Klassendeklaration Ende\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Instanz-Variablen"})," sind Variablen welche im ",(0,s.jsx)(n.code,{children:"Klassen-Body"})," definiert werden."]}),"\n",(0,s.jsxs)(n.li,{children:["Daher befinden sie sich ",(0,s.jsx)(n.strong,{children:"nicht innerhalb"})," einer ",(0,s.jsx)(n.code,{children:"Methode"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Instanzvariablen k\xf6nnen innerhalb ",(0,s.jsxs)(n.strong,{children:["aller ",(0,s.jsx)(n.code,{children:"Instanz-Methoden"})]})," zugegriffen\nwerden."]}),"\n",(0,s.jsxs)(n.li,{children:["Das Wort ",(0,s.jsx)(n.code,{children:"private"})," bedeutet, dass die Variable aber nur innerhalb der Klasse\nsichtbar ist, ",(0,s.jsx)(n.strong,{children:"nicht von ausserhalb"}),"."]}),"\n"]})]}),(0,s.jsxs)(i,{className:"shadow--tl",value:"banana",label:"Instanz-Methoden",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class ClassName { // Klassendeklaration Start\n\n  private int myInstanceVariable;                // Instanzvariablen\n\n  // highlight-start\n  public void setMyInstanceVariable(int value) { // Methode (setter)\n    myInstanceVariable = value;\n  }\n\n  public int getMyInstanceVariable() {           // Methode (getter)\n    return myInstanceVariable;\n  }\n  // highlight-end\n\n} // Klassendeklaration Ende\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Sind Methoden innerhalb einer Klasse, welche ",(0,s.jsxs)(n.strong,{children:["nicht ",(0,s.jsx)(n.code,{children:"static"})]})," deklariert,\nist."]}),"\n",(0,s.jsxs)(n.li,{children:["K\xf6nnen auf alle ",(0,s.jsx)(n.code,{children:"Instanz-Variablen"})," zugreifen."]}),"\n",(0,s.jsxs)(n.li,{children:["In ihnen wird die ",(0,s.jsx)(n.strong,{children:"Fachlogik"})," ausprogrammiert","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["H\xe4ufig werden ",(0,s.jsx)(n.code,{children:"Instanz-Variablen"})," mutiert, verarbeitet und oder\nzur\xfcckgegeben"]}),"\n"]}),"\n"]}),"\n"]})]}),(0,s.jsxs)(i,{className:"shadow--tl",value:"instanzmethodenbody",label:"Methoden-Body",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class ClassName { // Klassendeklaration Start\n\n  private int myInstanceVariable;                // Instanzvariablen\n\n  public void setMyInstanceVariable(int value) { // Methode (setter)\n    // highlight-next-line\n    myInstanceVariable = value;\n  }\n\n  public int getMyInstanceVariable() {           // Methode (getter)\n    // highlight-next-line\n    return myInstanceVariable;\n  }\n\n} // Klassendeklaration Ende\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Im ",(0,s.jsx)(n.code,{children:"Methoden-Body"})," befindet sich der ",(0,s.jsx)(n.strong,{children:"eigentliche Code f\xfcr die Fachlogik"})]}),"\n",(0,s.jsxs)(n.li,{children:["Werden ",(0,s.jsx)(n.code,{children:"Variablen"})," innerhalb vom Methoden-Body deklariert, sind diese\n",(0,s.jsx)(n.strong,{children:"ausschliesslich innerhalb diesem"}),", ab deren Deklaration\nverwendbar/sichtbar."]}),"\n"]})]})]}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.mdxAdmonitionTitle,{children:["keine ",(0,s.jsx)(n.code,{children:"main"})," Methode in einer Fachklasse"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Es gibt ",(0,s.jsx)(n.strong,{children:"keine"})," Methode ",(0,s.jsx)(n.code,{children:"public static void main(String[] args)"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Diese sollte ",(0,s.jsx)(n.strong,{children:"nur"})," in der ",(0,s.jsx)(n.code,{children:"Starter"})," Klasse existieren."]}),"\n",(0,s.jsxs)(n.li,{children:["Es ist theoretisch m\xf6glich mehrere ",(0,s.jsx)(n.code,{children:"main"})," Methoden zu haben, dies ist jedoch\n",(0,s.jsx)(n.strong,{children:"schlechter Stil"})]}),"\n"]})]}),"\n",(0,s.jsx)(n.admonition,{title:"klickt durch die Tabs!",type:"danger",children:(0,s.jsxs)(n.p,{children:["Bitte alle Tabs einmal durchgeben und ",(0,s.jsx)(n.strong,{children:"versucht zu verstehen"}),", wie eine Klasse\ngenau aufgebaut ist!"]})}),"\n",(0,s.jsx)(n.h2,{id:"instanziierung-und-verwendung-eines-objektsinstanz",children:"Instanziierung und Verwendung eines Objekts/Instanz"}),"\n",(0,s.jsx)(n.p,{children:"Objekte lassen sich im Code wie folgt erstellen:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Datentyp    Variable       Objektzuweisung  Objekterstellung\n   ClassName   variablenName         =         new ClassName();\n\n// Es k\xf6nnen mehrere Variablen mit Objekte der selben Klasse definiert werden\n   ClassName   otherClassName        =         new ClassName();\n\n//               Mit einem Punkt "." wird auf die Instanz-Methoden zugegriffen!\n   variablenName.setMyInstanceVariable(12);\n\n// Der R\xfcckgrabewert einer Methode kann in einer Variablen gespeichert werden\n   int value = variablenName.getMyInstanceVariable();\n\n// Der R\xfcckgrabewert einer Methode kann auch direkt wiederverwendet werden\n   otherObject.setMyInstanceVariable(variablenName.getMyInstanceVariable());\n'})}),"\n",(0,s.jsxs)(n.admonition,{title:"je besser die Namen, desto leserlicher wird der Code!",type:"tip",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ClassName"})," ist in dem oberen Beispiel generisch gew\xe4hlt da es sich um ein\ngenerelles Beispiel handelt. Anstatt ",(0,s.jsx)(n.code,{children:"ClassName"})," sollte sp\xe4ter ein spezifischer\nName gew\xe4hlt werden, wie z.B. ",(0,s.jsx)(n.code,{children:"Account"}),". Der Name der Variable kann beliebig\nsein. Das Gleiche gilt f\xfcr ",(0,s.jsx)(n.code,{children:"Variablen"})," und ",(0,s.jsx)(n.code,{children:"Methoden"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"Account savingAccount = new Account(); // Toll\nXyz b = new Xzy();                     // Evt. nicht ganz so toll ;)\n"})})]}),"\n",(0,s.jsx)(n.admonition,{title:"Instanz oder Objekt?",type:"note",children:(0,s.jsxs)(n.p,{children:["Die W\xf6rter Objekt und Instanz sind ",(0,s.jsx)(n.strong,{children:"Synonyme"}),", k\xf6nnen also beliebig vertauscht\nwerden."]})}),"\n",(0,s.jsx)(n.h2,{id:"-unterschied-von-einem-objekt-und-einer-variable",children:"\ud83e\uddb8 Unterschied von einem Objekt und einer Variable"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ein Objekt ist ",(0,s.jsx)(n.strong,{children:"immer in einer Variable"})," gespeichert."]}),"\n",(0,s.jsx)(n.li,{children:"Eine Variable muss aber nicht immer ein Objekt beinhalten."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"Account accountObjektVariable = new Account();\nint intVariable = 1;\n\n// `accountObjektVariable` beinhaltet ein Objekt der Klasse Account\n// `intVariable` beinhaltet den den Wert 1 vom `primitiven` Datentyp int\n\naccountObjektVariable.getClass(); // Ein Objekt besitzt Methoden welche ausgef\xfchrt werden k\xf6nnen\nintVariable.getClass(); // f\xfchrt zu einem ERROR. (versuche es in `eclipse`!)\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"Faustregel",type:"tip",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Wenn der ",(0,s.jsx)(n.strong,{children:"Datentyp"})," mit einem ",(0,s.jsx)(n.strong,{children:"Grossbuchstaben"})," anf\xe4ngt (",(0,s.jsx)(n.code,{children:"String"}),",\n",(0,s.jsx)(n.code,{children:"Account"}),", ...) handelt es sich um ein ",(0,s.jsx)(n.strong,{children:"Objekt"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Wenn der ",(0,s.jsx)(n.strong,{children:"Datentyp"})," mit einem ",(0,s.jsx)(n.strong,{children:"Kleinbuchstaben"})," anf\xe4ngt (",(0,s.jsx)(n.code,{children:"int"}),", ",(0,s.jsx)(n.code,{children:"double"}),",\n",(0,s.jsx)(n.code,{children:"char"}),", ...) ist es ",(0,s.jsx)(n.strong,{children:"kein Objekt"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Ein ",(0,s.jsx)(n.strong,{children:"Objekt besitzt Methoden"}),", welche man ausf\xfchren kann, ein ",(0,s.jsx)(n.strong,{children:"primitiver\nDatentyp nicht"}),".","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Jedes Objekt"})," besitzt die Methode ",(0,s.jsx)(n.code,{children:"getClass()"}),";"]}),"\n"]}),"\n"]}),"\n"]})})]})}function o(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:function(e,n,i){i.d(n,{Z:function(){return l},a:function(){return r}});var s=i(7294);const t={},a=s.createContext(t);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);